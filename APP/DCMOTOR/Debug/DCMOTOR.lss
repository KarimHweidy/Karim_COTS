
DCMOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00001f82  00001ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b48  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dd4  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000494c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006845  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000084e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000088cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000909b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 77 0e 	call	0x1cee	; 0x1cee <main>
      7a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e9       	ldi	r26, 0x92	; 146
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e9       	ldi	r24, 0x92	; 146
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <voidSendEnablePulse>:
#include "CLCD_interface.h"
#include "CLCD_prv.h"
#include "CLCD_cfg.h"

static void voidSendEnablePulse(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	62 e0       	ldi	r22, 0x02	; 2
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e4       	ldi	r27, 0x40	; 64
     b5c:	8b 87       	std	Y+11, r24	; 0x0b
     b5e:	9c 87       	std	Y+12, r25	; 0x0c
     b60:	ad 87       	std	Y+13, r26	; 0x0d
     b62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b64:	6b 85       	ldd	r22, Y+11	; 0x0b
     b66:	7c 85       	ldd	r23, Y+12	; 0x0c
     b68:	8d 85       	ldd	r24, Y+13	; 0x0d
     b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	4a e7       	ldi	r20, 0x7A	; 122
     b72:	55 e4       	ldi	r21, 0x45	; 69
     b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	8f 83       	std	Y+7, r24	; 0x07
     b7e:	98 87       	std	Y+8, r25	; 0x08
     b80:	a9 87       	std	Y+9, r26	; 0x09
     b82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b84:	6f 81       	ldd	r22, Y+7	; 0x07
     b86:	78 85       	ldd	r23, Y+8	; 0x08
     b88:	89 85       	ldd	r24, Y+9	; 0x09
     b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e8       	ldi	r20, 0x80	; 128
     b92:	5f e3       	ldi	r21, 0x3F	; 63
     b94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     b98:	88 23       	and	r24, r24
     b9a:	2c f4       	brge	.+10     	; 0xba6 <voidSendEnablePulse+0x70>
		__ticks = 1;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	9e 83       	std	Y+6, r25	; 0x06
     ba2:	8d 83       	std	Y+5, r24	; 0x05
     ba4:	3f c0       	rjmp	.+126    	; 0xc24 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     ba6:	6f 81       	ldd	r22, Y+7	; 0x07
     ba8:	78 85       	ldd	r23, Y+8	; 0x08
     baa:	89 85       	ldd	r24, Y+9	; 0x09
     bac:	9a 85       	ldd	r25, Y+10	; 0x0a
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	3f ef       	ldi	r19, 0xFF	; 255
     bb2:	4f e7       	ldi	r20, 0x7F	; 127
     bb4:	57 e4       	ldi	r21, 0x47	; 71
     bb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bba:	18 16       	cp	r1, r24
     bbc:	4c f5       	brge	.+82     	; 0xc10 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e2       	ldi	r20, 0x20	; 32
     bcc:	51 e4       	ldi	r21, 0x41	; 65
     bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	8d 83       	std	Y+5, r24	; 0x05
     be6:	0f c0       	rjmp	.+30     	; 0xc06 <voidSendEnablePulse+0xd0>
     be8:	80 e9       	ldi	r24, 0x90	; 144
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <voidSendEnablePulse+0xbe>
     bf8:	9c 83       	std	Y+4, r25	; 0x04
     bfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	9e 81       	ldd	r25, Y+6	; 0x06
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	9e 83       	std	Y+6, r25	; 0x06
     c04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	69 f7       	brne	.-38     	; 0xbe8 <voidSendEnablePulse+0xb2>
     c0e:	14 c0       	rjmp	.+40     	; 0xc38 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <voidSendEnablePulse+0xfa>
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
}
     c42:	2e 96       	adiw	r28, 0x0e	; 14
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	0f 92       	push	r0
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	98 2f       	mov	r25, r24
     c64:	91 70       	andi	r25, 0x01	; 1
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	63 e0       	ldi	r22, 0x03	; 3
     c6a:	49 2f       	mov	r20, r25
     c6c:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	86 95       	lsr	r24
     c74:	98 2f       	mov	r25, r24
     c76:	91 70       	andi	r25, 0x01	; 1
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	64 e0       	ldi	r22, 0x04	; 4
     c7c:	49 2f       	mov	r20, r25
     c7e:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	86 95       	lsr	r24
     c86:	86 95       	lsr	r24
     c88:	98 2f       	mov	r25, r24
     c8a:	91 70       	andi	r25, 0x01	; 1
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	65 e0       	ldi	r22, 0x05	; 5
     c90:	49 2f       	mov	r20, r25
     c92:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	86 95       	lsr	r24
     c9a:	86 95       	lsr	r24
     c9c:	86 95       	lsr	r24
     c9e:	98 2f       	mov	r25, r24
     ca0:	91 70       	andi	r25, 0x01	; 1
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	66 e0       	ldi	r22, 0x06	; 6
     ca6:	49 2f       	mov	r20, r25
     ca8:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
}
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	82 95       	swap	r24
     cce:	8f 70       	andi	r24, 0x0F	; 15
     cd0:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cd4:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cde:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
#endif
}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	0f 92       	push	r0
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to high for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	82 95       	swap	r24
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d0a:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d14:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
#endif

}
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	2e 97       	sbiw	r28, 0x0e	; 14
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	a0 e2       	ldi	r26, 0x20	; 32
     d3a:	b2 e4       	ldi	r27, 0x42	; 66
     d3c:	8b 87       	std	Y+11, r24	; 0x0b
     d3e:	9c 87       	std	Y+12, r25	; 0x0c
     d40:	ad 87       	std	Y+13, r26	; 0x0d
     d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d44:	6b 85       	ldd	r22, Y+11	; 0x0b
     d46:	7c 85       	ldd	r23, Y+12	; 0x0c
     d48:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	4a e7       	ldi	r20, 0x7A	; 122
     d52:	55 e4       	ldi	r21, 0x45	; 69
     d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	8f 83       	std	Y+7, r24	; 0x07
     d5e:	98 87       	std	Y+8, r25	; 0x08
     d60:	a9 87       	std	Y+9, r26	; 0x09
     d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d64:	6f 81       	ldd	r22, Y+7	; 0x07
     d66:	78 85       	ldd	r23, Y+8	; 0x08
     d68:	89 85       	ldd	r24, Y+9	; 0x09
     d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d78:	88 23       	and	r24, r24
     d7a:	2c f4       	brge	.+10     	; 0xd86 <CLCD_voidInit+0x66>
		__ticks = 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	9e 83       	std	Y+6, r25	; 0x06
     d82:	8d 83       	std	Y+5, r24	; 0x05
     d84:	3f c0       	rjmp	.+126    	; 0xe04 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d86:	6f 81       	ldd	r22, Y+7	; 0x07
     d88:	78 85       	ldd	r23, Y+8	; 0x08
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	3f ef       	ldi	r19, 0xFF	; 255
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	57 e4       	ldi	r21, 0x47	; 71
     d96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d9a:	18 16       	cp	r1, r24
     d9c:	4c f5       	brge	.+82     	; 0xdf0 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     da0:	7c 85       	ldd	r23, Y+12	; 0x0c
     da2:	8d 85       	ldd	r24, Y+13	; 0x0d
     da4:	9e 85       	ldd	r25, Y+14	; 0x0e
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e2       	ldi	r20, 0x20	; 32
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	bc 01       	movw	r22, r24
     db8:	cd 01       	movw	r24, r26
     dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	9e 83       	std	Y+6, r25	; 0x06
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	0f c0       	rjmp	.+30     	; 0xde6 <CLCD_voidInit+0xc6>
     dc8:	80 e9       	ldi	r24, 0x90	; 144
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	8b 83       	std	Y+3, r24	; 0x03
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <CLCD_voidInit+0xb4>
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	69 f7       	brne	.-38     	; 0xdc8 <CLCD_voidInit+0xa8>
     dee:	14 c0       	rjmp	.+40     	; 0xe18 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df0:	6f 81       	ldd	r22, Y+7	; 0x07
     df2:	78 85       	ldd	r23, Y+8	; 0x08
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <CLCD_voidInit+0xf0>
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e1e:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e28:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e32:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
     e36:	8c e0       	ldi	r24, 0x0C	; 12
     e38:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
}
     e42:	2e 96       	adiw	r28, 0x0e	; 14
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_chString)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <CLCD_u8SendString+0x6>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <CLCD_u8SendString+0x8>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	9c 83       	std	Y+4, r25	; 0x04
     e62:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState= OK;
     e64:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chString != NULL)
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	e1 f0       	breq	.+56     	; 0xea6 <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Counter=0u;
     e6e:	19 82       	std	Y+1, r1	; 0x01
     e70:	0e c0       	rjmp	.+28     	; 0xe8e <CLCD_u8SendString+0x3a>
		while(Copy_chString[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	fc 01       	movw	r30, r24
     e7e:	e2 0f       	add	r30, r18
     e80:	f3 1f       	adc	r31, r19
     e82:	80 81       	ld	r24, Z
     e84:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
			Local_u8Counter++;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState= OK;
	if(Copy_chString != NULL)
	{
		uint8 Local_u8Counter=0u;
		while(Copy_chString[Local_u8Counter] != '\0')
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	fc 01       	movw	r30, r24
     e9a:	e2 0f       	add	r30, r18
     e9c:	f3 1f       	adc	r31, r19
     e9e:	80 81       	ld	r24, Z
     ea0:	88 23       	and	r24, r24
     ea2:	39 f7       	brne	.-50     	; 0xe72 <CLCD_u8SendString+0x1e>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	61 97       	sbiw	r28, 0x11	; 17
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	6e 87       	std	Y+14, r22	; 0x0e
     ed0:	7f 87       	std	Y+15, r23	; 0x0f
     ed2:	88 8b       	std	Y+16, r24	; 0x10
     ed4:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chNumberArr[10];
	uint8 Local_u8RightDigit;
	uint8 Local_u8Counter=0;
     ed6:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_s8Counter2;

	if (Copy_s32Number == 0)
     ed8:	8e 85       	ldd	r24, Y+14	; 0x0e
     eda:	9f 85       	ldd	r25, Y+15	; 0x0f
     edc:	a8 89       	ldd	r26, Y+16	; 0x10
     ede:	b9 89       	ldd	r27, Y+17	; 0x11
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	a1 05       	cpc	r26, r1
     ee4:	b1 05       	cpc	r27, r1
     ee6:	21 f4       	brne	.+8      	; 0xef0 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData('0');
     ee8:	80 e3       	ldi	r24, 0x30	; 48
     eea:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
     eee:	69 c0       	rjmp	.+210    	; 0xfc2 <CLCD_voidSendNumber+0x108>
		return ;
	}
	else if(Copy_s32Number < 0)
     ef0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ef2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ef4:	a8 89       	ldd	r26, Y+16	; 0x10
     ef6:	b9 89       	ldd	r27, Y+17	; 0x11
     ef8:	bb 23       	and	r27, r27
     efa:	0c f0       	brlt	.+2      	; 0xefe <CLCD_voidSendNumber+0x44>
     efc:	43 c0       	rjmp	.+134    	; 0xf84 <CLCD_voidSendNumber+0xca>
	{
		CLCD_voidSendData('-');
     efe:	8d e2       	ldi	r24, 0x2D	; 45
     f00:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
		Copy_s32Number *= -1;
     f04:	8e 85       	ldd	r24, Y+14	; 0x0e
     f06:	9f 85       	ldd	r25, Y+15	; 0x0f
     f08:	a8 89       	ldd	r26, Y+16	; 0x10
     f0a:	b9 89       	ldd	r27, Y+17	; 0x11
     f0c:	b0 95       	com	r27
     f0e:	a0 95       	com	r26
     f10:	90 95       	com	r25
     f12:	81 95       	neg	r24
     f14:	9f 4f       	sbci	r25, 0xFF	; 255
     f16:	af 4f       	sbci	r26, 0xFF	; 255
     f18:	bf 4f       	sbci	r27, 0xFF	; 255
     f1a:	8e 87       	std	Y+14, r24	; 0x0e
     f1c:	9f 87       	std	Y+15, r25	; 0x0f
     f1e:	a8 8b       	std	Y+16, r26	; 0x10
     f20:	b9 8b       	std	Y+17, r27	; 0x11
     f22:	30 c0       	rjmp	.+96     	; 0xf84 <CLCD_voidSendNumber+0xca>
	}
	while(Copy_s32Number != 0)
	{
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
     f24:	8e 85       	ldd	r24, Y+14	; 0x0e
     f26:	9f 85       	ldd	r25, Y+15	; 0x0f
     f28:	a8 89       	ldd	r26, Y+16	; 0x10
     f2a:	b9 89       	ldd	r27, Y+17	; 0x11
     f2c:	2a e0       	ldi	r18, 0x0A	; 10
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__divmodsi4>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
     f42:	8e 85       	ldd	r24, Y+14	; 0x0e
     f44:	9f 85       	ldd	r25, Y+15	; 0x0f
     f46:	a8 89       	ldd	r26, Y+16	; 0x10
     f48:	b9 89       	ldd	r27, Y+17	; 0x11
     f4a:	2a e0       	ldi	r18, 0x0A	; 10
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__divmodsi4>
     f5a:	da 01       	movw	r26, r20
     f5c:	c9 01       	movw	r24, r18
     f5e:	8e 87       	std	Y+14, r24	; 0x0e
     f60:	9f 87       	std	Y+15, r25	; 0x0f
     f62:	a8 8b       	std	Y+16, r26	; 0x10
     f64:	b9 8b       	std	Y+17, r27	; 0x11
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	48 2f       	mov	r20, r24
     f70:	40 5d       	subi	r20, 0xD0	; 208
     f72:	ce 01       	movw	r24, r28
     f74:	04 96       	adiw	r24, 0x04	; 4
     f76:	fc 01       	movw	r30, r24
     f78:	e2 0f       	add	r30, r18
     f7a:	f3 1f       	adc	r31, r19
     f7c:	40 83       	st	Z, r20
		Local_u8Counter++;
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	8a 83       	std	Y+2, r24	; 0x02
	else if(Copy_s32Number < 0)
	{
		CLCD_voidSendData('-');
		Copy_s32Number *= -1;
	}
	while(Copy_s32Number != 0)
     f84:	8e 85       	ldd	r24, Y+14	; 0x0e
     f86:	9f 85       	ldd	r25, Y+15	; 0x0f
     f88:	a8 89       	ldd	r26, Y+16	; 0x10
     f8a:	b9 89       	ldd	r27, Y+17	; 0x11
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	a1 05       	cpc	r26, r1
     f90:	b1 05       	cpc	r27, r1
     f92:	41 f6       	brne	.-112    	; 0xf24 <CLCD_voidSendNumber+0x6a>
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	81 50       	subi	r24, 0x01	; 1
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	10 c0       	rjmp	.+32     	; 0xfbc <CLCD_voidSendNumber+0x102>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	28 2f       	mov	r18, r24
     fa0:	33 27       	eor	r19, r19
     fa2:	27 fd       	sbrc	r18, 7
     fa4:	30 95       	com	r19
     fa6:	ce 01       	movw	r24, r28
     fa8:	04 96       	adiw	r24, 0x04	; 4
     faa:	fc 01       	movw	r30, r24
     fac:	e2 0f       	add	r30, r18
     fae:	f3 1f       	adc	r31, r19
     fb0:	80 81       	ld	r24, Z
     fb2:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	81 50       	subi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	88 23       	and	r24, r24
     fc0:	6c f7       	brge	.-38     	; 0xf9c <CLCD_voidSendNumber+0xe2>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
	}
}
     fc2:	61 96       	adiw	r28, 0x11	; 17
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <CLCD_viodGoToXY>:
void CLCD_viodGoToXY(uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <CLCD_viodGoToXY+0x6>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	8a 83       	std	Y+2, r24	; 0x02
     fe2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRamAdd;
	if(Copy_u8YPos == 0u)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 23       	and	r24, r24
     fe8:	19 f4       	brne	.+6      	; 0xff0 <CLCD_viodGoToXY+0x1c>
	{
		Local_u8DDRamAdd= Copy_u8XPos;
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	06 c0       	rjmp	.+12     	; 0xffc <CLCD_viodGoToXY+0x28>
	}
	else if (Copy_u8YPos == 1u)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	19 f4       	brne	.+6      	; 0xffc <CLCD_viodGoToXY+0x28>
	{
		Local_u8DDRamAdd= 0x40+ Copy_u8XPos;
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	80 5c       	subi	r24, 0xC0	; 192
     ffa:	89 83       	std	Y+1, r24	; 0x01
	}
	Local_u8DDRamAdd |= 1<<7u;
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <CLCD_voidSendSpecialCharacter>:
void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_PatternNumber,uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	27 97       	sbiw	r28, 0x07	; 7
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	9c 83       	std	Y+4, r25	; 0x04
    102a:	8b 83       	std	Y+3, r24	; 0x03
    102c:	6d 83       	std	Y+5, r22	; 0x05
    102e:	4e 83       	std	Y+6, r20	; 0x06
    1030:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdd= Copy_PatternNumber * 8u;
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8LoopCounter;
	/*Set bit number 6 for set CGRAM address command*/
	Local_u8CGRAMAdd |= 1<<6;
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	80 64       	ori	r24, 0x40	; 64
    104a:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8u;Local_u8LoopCounter++)
    1052:	19 82       	std	Y+1, r1	; 0x01
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	fc 01       	movw	r30, r24
    1062:	e2 0f       	add	r30, r18
    1064:	f3 1f       	adc	r31, r19
    1066:	80 81       	ld	r24, Z
    1068:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
	uint8 Local_u8LoopCounter;
	/*Set bit number 6 for set CGRAM address command*/
	Local_u8CGRAMAdd |= 1<<6;
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8u;Local_u8LoopCounter++)
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	88 30       	cpi	r24, 0x08	; 8
    1076:	78 f3       	brcs	.-34     	; 0x1056 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
	}

	/*Goto DDRAM to display*/
	CLCD_viodGoToXY(Copy_u8XPos, Copy_u8YPos);
    1078:	8e 81       	ldd	r24, Y+6	; 0x06
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_viodGoToXY>

	CLCD_voidSendData(Copy_PatternNumber);
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
}
    1086:	27 96       	adiw	r28, 0x07	; 7
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <CLCD_voidSendBinary>:
void CLCD_voidSendBinary(sint8 Copy_s8Number)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	2b 97       	sbiw	r28, 0x0b	; 11
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
    10ae:	1a 82       	std	Y+2, r1	; 0x02
    10b0:	88 e0       	ldi	r24, 0x08	; 8
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	20 c0       	rjmp	.+64     	; 0x10f6 <CLCD_voidSendBinary+0x5e>
	uint8 Local_u8BinarryArr[8];
	while(Local_u8LoopCounter2!=0)
	{
		Local_u8LoopCounter2--;
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	81 50       	subi	r24, 0x01	; 1
    10ba:	89 83       	std	Y+1, r24	; 0x01
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	48 2f       	mov	r20, r24
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    10c4:	28 2f       	mov	r18, r24
    10c6:	33 27       	eor	r19, r19
    10c8:	27 fd       	sbrc	r18, 7
    10ca:	30 95       	com	r19
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	b9 01       	movw	r22, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <CLCD_voidSendBinary+0x42>
    10d6:	75 95       	asr	r23
    10d8:	67 95       	ror	r22
    10da:	8a 95       	dec	r24
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <CLCD_voidSendBinary+0x3e>
    10de:	cb 01       	movw	r24, r22
    10e0:	28 2f       	mov	r18, r24
    10e2:	21 70       	andi	r18, 0x01	; 1
    10e4:	ce 01       	movw	r24, r28
    10e6:	03 96       	adiw	r24, 0x03	; 3
    10e8:	fc 01       	movw	r30, r24
    10ea:	e4 0f       	add	r30, r20
    10ec:	f5 1f       	adc	r31, r21
    10ee:	20 83       	st	Z, r18
		Local_u8LoopCounter1++;
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	8a 83       	std	Y+2, r24	; 0x02
}
void CLCD_voidSendBinary(sint8 Copy_s8Number)
{
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
	uint8 Local_u8BinarryArr[8];
	while(Local_u8LoopCounter2!=0)
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	88 23       	and	r24, r24
    10fa:	e9 f6       	brne	.-70     	; 0x10b6 <CLCD_voidSendBinary+0x1e>
		Local_u8LoopCounter2--;
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;

	}
	CLCD_u8SendString("0b");
    10fc:	80 e6       	ldi	r24, 0x60	; 96
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    1104:	1a 82       	std	Y+2, r1	; 0x02
    1106:	14 c0       	rjmp	.+40     	; 0x1130 <CLCD_voidSendBinary+0x98>
	{
		CLCD_voidSendNumber(Local_u8BinarryArr[Local_u8LoopCounter1]);
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	ce 01       	movw	r24, r28
    1110:	03 96       	adiw	r24, 0x03	; 3
    1112:	fc 01       	movw	r30, r24
    1114:	e2 0f       	add	r30, r18
    1116:	f3 1f       	adc	r31, r19
    1118:	80 81       	ld	r24, Z
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 5d 07 	call	0xeba	; 0xeba <CLCD_voidSendNumber>
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;

	}
	CLCD_u8SendString("0b");
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	8f 5f       	subi	r24, 0xFF	; 255
    112e:	8a 83       	std	Y+2, r24	; 0x02
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	88 30       	cpi	r24, 0x08	; 8
    1134:	48 f3       	brcs	.-46     	; 0x1108 <CLCD_voidSendBinary+0x70>
	{
		CLCD_voidSendNumber(Local_u8BinarryArr[Local_u8LoopCounter1]);
	}
}
    1136:	2b 96       	adiw	r28, 0x0b	; 11
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <CLCD_voidSendHex>:
void CLCD_voidSendHex(sint8 Copy_s8Number)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	62 97       	sbiw	r28, 0x12	; 18
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	8e 87       	std	Y+14, r24	; 0x0e
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
    115e:	1d 82       	std	Y+5, r1	; 0x05
    1160:	88 e0       	ldi	r24, 0x08	; 8
    1162:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Local_u8BinarryArr[8];
	uint8 Local_u8FirstDigit=0,Local_u8SecondDigit=0,Local_u8Temp=0;
    1164:	1b 82       	std	Y+3, r1	; 0x03
    1166:	1a 82       	std	Y+2, r1	; 0x02
    1168:	19 82       	std	Y+1, r1	; 0x01
    116a:	20 c0       	rjmp	.+64     	; 0x11ac <CLCD_voidSendHex+0x64>

	while(Local_u8LoopCounter2!=0)
	{
		Local_u8LoopCounter2--;
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	81 50       	subi	r24, 0x01	; 1
    1170:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	48 2f       	mov	r20, r24
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	8e 85       	ldd	r24, Y+14	; 0x0e
    117a:	28 2f       	mov	r18, r24
    117c:	33 27       	eor	r19, r19
    117e:	27 fd       	sbrc	r18, 7
    1180:	30 95       	com	r19
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	b9 01       	movw	r22, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <CLCD_voidSendHex+0x48>
    118c:	75 95       	asr	r23
    118e:	67 95       	ror	r22
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <CLCD_voidSendHex+0x44>
    1194:	cb 01       	movw	r24, r22
    1196:	28 2f       	mov	r18, r24
    1198:	21 70       	andi	r18, 0x01	; 1
    119a:	ce 01       	movw	r24, r28
    119c:	06 96       	adiw	r24, 0x06	; 6
    119e:	fc 01       	movw	r30, r24
    11a0:	e4 0f       	add	r30, r20
    11a2:	f5 1f       	adc	r31, r21
    11a4:	20 83       	st	Z, r18
		Local_u8LoopCounter1++;
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	8d 83       	std	Y+5, r24	; 0x05
{
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
	uint8 Local_u8BinarryArr[8];
	uint8 Local_u8FirstDigit=0,Local_u8SecondDigit=0,Local_u8Temp=0;

	while(Local_u8LoopCounter2!=0)
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	88 23       	and	r24, r24
    11b0:	e9 f6       	brne	.-70     	; 0x116c <CLCD_voidSendHex+0x24>
	{
		Local_u8LoopCounter2--;
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;
	}
	Local_u8LoopCounter2=3;
    11b2:	83 e0       	ldi	r24, 0x03	; 3
    11b4:	8c 83       	std	Y+4, r24	; 0x04
	CLCD_u8SendString("0x");
    11b6:	83 e6       	ldi	r24, 0x63	; 99
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=3;Local_u8LoopCounter1++)
    11be:	1d 82       	std	Y+5, r1	; 0x05
    11c0:	1f c0       	rjmp	.+62     	; 0x1200 <CLCD_voidSendHex+0xb8>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	ce 01       	movw	r24, r28
    11ca:	06 96       	adiw	r24, 0x06	; 6
    11cc:	fc 01       	movw	r30, r24
    11ce:	e2 0f       	add	r30, r18
    11d0:	f3 1f       	adc	r31, r19
    11d2:	80 81       	ld	r24, Z
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	a9 01       	movw	r20, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <CLCD_voidSendHex+0x9e>
    11e2:	44 0f       	add	r20, r20
    11e4:	55 1f       	adc	r21, r21
    11e6:	8a 95       	dec	r24
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <CLCD_voidSendHex+0x9a>
    11ea:	ca 01       	movw	r24, r20
    11ec:	98 2f       	mov	r25, r24
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	89 2b       	or	r24, r25
    11f2:	89 83       	std	Y+1, r24	; 0x01
		Local_u8LoopCounter2--;
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	81 50       	subi	r24, 0x01	; 1
    11f8:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;
	}
	Local_u8LoopCounter2=3;
	CLCD_u8SendString("0x");
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=3;Local_u8LoopCounter1++)
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	8f 5f       	subi	r24, 0xFF	; 255
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	f0 f2       	brcs	.-68     	; 0x11c2 <CLCD_voidSendHex+0x7a>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
		Local_u8LoopCounter2--;
	}
	switch(Local_u8Temp)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	68 2f       	mov	r22, r24
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	7a 8b       	std	Y+18, r23	; 0x12
    120e:	69 8b       	std	Y+17, r22	; 0x11
    1210:	89 89       	ldd	r24, Y+17	; 0x11
    1212:	9a 89       	ldd	r25, Y+18	; 0x12
    1214:	8c 30       	cpi	r24, 0x0C	; 12
    1216:	91 05       	cpc	r25, r1
    1218:	31 f1       	breq	.+76     	; 0x1266 <CLCD_voidSendHex+0x11e>
    121a:	29 89       	ldd	r18, Y+17	; 0x11
    121c:	3a 89       	ldd	r19, Y+18	; 0x12
    121e:	2d 30       	cpi	r18, 0x0D	; 13
    1220:	31 05       	cpc	r19, r1
    1222:	5c f4       	brge	.+22     	; 0x123a <CLCD_voidSendHex+0xf2>
    1224:	49 89       	ldd	r20, Y+17	; 0x11
    1226:	5a 89       	ldd	r21, Y+18	; 0x12
    1228:	4a 30       	cpi	r20, 0x0A	; 10
    122a:	51 05       	cpc	r21, r1
    122c:	b1 f0       	breq	.+44     	; 0x125a <CLCD_voidSendHex+0x112>
    122e:	69 89       	ldd	r22, Y+17	; 0x11
    1230:	7a 89       	ldd	r23, Y+18	; 0x12
    1232:	6b 30       	cpi	r22, 0x0B	; 11
    1234:	71 05       	cpc	r23, r1
    1236:	a1 f0       	breq	.+40     	; 0x1260 <CLCD_voidSendHex+0x118>
    1238:	22 c0       	rjmp	.+68     	; 0x127e <CLCD_voidSendHex+0x136>
    123a:	89 89       	ldd	r24, Y+17	; 0x11
    123c:	9a 89       	ldd	r25, Y+18	; 0x12
    123e:	8e 30       	cpi	r24, 0x0E	; 14
    1240:	91 05       	cpc	r25, r1
    1242:	b9 f0       	breq	.+46     	; 0x1272 <CLCD_voidSendHex+0x12a>
    1244:	29 89       	ldd	r18, Y+17	; 0x11
    1246:	3a 89       	ldd	r19, Y+18	; 0x12
    1248:	2e 30       	cpi	r18, 0x0E	; 14
    124a:	31 05       	cpc	r19, r1
    124c:	7c f0       	brlt	.+30     	; 0x126c <CLCD_voidSendHex+0x124>
    124e:	49 89       	ldd	r20, Y+17	; 0x11
    1250:	5a 89       	ldd	r21, Y+18	; 0x12
    1252:	4f 30       	cpi	r20, 0x0F	; 15
    1254:	51 05       	cpc	r21, r1
    1256:	81 f0       	breq	.+32     	; 0x1278 <CLCD_voidSendHex+0x130>
    1258:	12 c0       	rjmp	.+36     	; 0x127e <CLCD_voidSendHex+0x136>
	{
	   case 10:Local_u8FirstDigit='A'; break;
    125a:	81 e4       	ldi	r24, 0x41	; 65
    125c:	8b 83       	std	Y+3, r24	; 0x03
    125e:	12 c0       	rjmp	.+36     	; 0x1284 <CLCD_voidSendHex+0x13c>
	   case 11:Local_u8FirstDigit='B'; break;
    1260:	82 e4       	ldi	r24, 0x42	; 66
    1262:	8b 83       	std	Y+3, r24	; 0x03
    1264:	0f c0       	rjmp	.+30     	; 0x1284 <CLCD_voidSendHex+0x13c>
	   case 12:Local_u8FirstDigit='C'; break;
    1266:	83 e4       	ldi	r24, 0x43	; 67
    1268:	8b 83       	std	Y+3, r24	; 0x03
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <CLCD_voidSendHex+0x13c>
	   case 13:Local_u8FirstDigit='D'; break;
    126c:	84 e4       	ldi	r24, 0x44	; 68
    126e:	8b 83       	std	Y+3, r24	; 0x03
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <CLCD_voidSendHex+0x13c>
	   case 14:Local_u8FirstDigit='E'; break;
    1272:	85 e4       	ldi	r24, 0x45	; 69
    1274:	8b 83       	std	Y+3, r24	; 0x03
    1276:	06 c0       	rjmp	.+12     	; 0x1284 <CLCD_voidSendHex+0x13c>
	   case 15:Local_u8FirstDigit='F'; break;
    1278:	86 e4       	ldi	r24, 0x46	; 70
    127a:	8b 83       	std	Y+3, r24	; 0x03
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <CLCD_voidSendHex+0x13c>
	   default:Local_u8FirstDigit=Local_u8Temp+'0';break;
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	80 5d       	subi	r24, 0xD0	; 208
    1282:	8b 83       	std	Y+3, r24	; 0x03
	}
	Local_u8LoopCounter2=3;
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Temp=0;
    1288:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8LoopCounter1=4;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    128a:	84 e0       	ldi	r24, 0x04	; 4
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	1f c0       	rjmp	.+62     	; 0x12ce <CLCD_voidSendHex+0x186>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	ce 01       	movw	r24, r28
    1298:	06 96       	adiw	r24, 0x06	; 6
    129a:	fc 01       	movw	r30, r24
    129c:	e2 0f       	add	r30, r18
    129e:	f3 1f       	adc	r31, r19
    12a0:	80 81       	ld	r24, Z
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	b9 01       	movw	r22, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <CLCD_voidSendHex+0x16c>
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	8a 95       	dec	r24
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <CLCD_voidSendHex+0x168>
    12b8:	cb 01       	movw	r24, r22
    12ba:	98 2f       	mov	r25, r24
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	89 2b       	or	r24, r25
    12c0:	89 83       	std	Y+1, r24	; 0x01
		Local_u8LoopCounter2--;
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	81 50       	subi	r24, 0x01	; 1
    12c6:	8c 83       	std	Y+4, r24	; 0x04
	   case 15:Local_u8FirstDigit='F'; break;
	   default:Local_u8FirstDigit=Local_u8Temp+'0';break;
	}
	Local_u8LoopCounter2=3;
	Local_u8Temp=0;
	for(Local_u8LoopCounter1=4;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	8f 5f       	subi	r24, 0xFF	; 255
    12cc:	8d 83       	std	Y+5, r24	; 0x05
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	88 30       	cpi	r24, 0x08	; 8
    12d2:	f0 f2       	brcs	.-68     	; 0x1290 <CLCD_voidSendHex+0x148>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
		Local_u8LoopCounter2--;
	}
	switch(Local_u8Temp)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	38 8b       	std	Y+16, r19	; 0x10
    12dc:	2f 87       	std	Y+15, r18	; 0x0f
    12de:	4f 85       	ldd	r20, Y+15	; 0x0f
    12e0:	58 89       	ldd	r21, Y+16	; 0x10
    12e2:	4c 30       	cpi	r20, 0x0C	; 12
    12e4:	51 05       	cpc	r21, r1
    12e6:	31 f1       	breq	.+76     	; 0x1334 <CLCD_voidSendHex+0x1ec>
    12e8:	6f 85       	ldd	r22, Y+15	; 0x0f
    12ea:	78 89       	ldd	r23, Y+16	; 0x10
    12ec:	6d 30       	cpi	r22, 0x0D	; 13
    12ee:	71 05       	cpc	r23, r1
    12f0:	5c f4       	brge	.+22     	; 0x1308 <CLCD_voidSendHex+0x1c0>
    12f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f4:	98 89       	ldd	r25, Y+16	; 0x10
    12f6:	8a 30       	cpi	r24, 0x0A	; 10
    12f8:	91 05       	cpc	r25, r1
    12fa:	b1 f0       	breq	.+44     	; 0x1328 <CLCD_voidSendHex+0x1e0>
    12fc:	2f 85       	ldd	r18, Y+15	; 0x0f
    12fe:	38 89       	ldd	r19, Y+16	; 0x10
    1300:	2b 30       	cpi	r18, 0x0B	; 11
    1302:	31 05       	cpc	r19, r1
    1304:	a1 f0       	breq	.+40     	; 0x132e <CLCD_voidSendHex+0x1e6>
    1306:	22 c0       	rjmp	.+68     	; 0x134c <CLCD_voidSendHex+0x204>
    1308:	4f 85       	ldd	r20, Y+15	; 0x0f
    130a:	58 89       	ldd	r21, Y+16	; 0x10
    130c:	4e 30       	cpi	r20, 0x0E	; 14
    130e:	51 05       	cpc	r21, r1
    1310:	b9 f0       	breq	.+46     	; 0x1340 <CLCD_voidSendHex+0x1f8>
    1312:	6f 85       	ldd	r22, Y+15	; 0x0f
    1314:	78 89       	ldd	r23, Y+16	; 0x10
    1316:	6e 30       	cpi	r22, 0x0E	; 14
    1318:	71 05       	cpc	r23, r1
    131a:	7c f0       	brlt	.+30     	; 0x133a <CLCD_voidSendHex+0x1f2>
    131c:	8f 85       	ldd	r24, Y+15	; 0x0f
    131e:	98 89       	ldd	r25, Y+16	; 0x10
    1320:	8f 30       	cpi	r24, 0x0F	; 15
    1322:	91 05       	cpc	r25, r1
    1324:	81 f0       	breq	.+32     	; 0x1346 <CLCD_voidSendHex+0x1fe>
    1326:	12 c0       	rjmp	.+36     	; 0x134c <CLCD_voidSendHex+0x204>
	{
	   case 10:Local_u8SecondDigit='A'; break;
    1328:	81 e4       	ldi	r24, 0x41	; 65
    132a:	8a 83       	std	Y+2, r24	; 0x02
    132c:	12 c0       	rjmp	.+36     	; 0x1352 <CLCD_voidSendHex+0x20a>
	   case 11:Local_u8SecondDigit='B'; break;
    132e:	82 e4       	ldi	r24, 0x42	; 66
    1330:	8a 83       	std	Y+2, r24	; 0x02
    1332:	0f c0       	rjmp	.+30     	; 0x1352 <CLCD_voidSendHex+0x20a>
	   case 12:Local_u8SecondDigit='C'; break;
    1334:	83 e4       	ldi	r24, 0x43	; 67
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	0c c0       	rjmp	.+24     	; 0x1352 <CLCD_voidSendHex+0x20a>
	   case 13:Local_u8SecondDigit='D'; break;
    133a:	84 e4       	ldi	r24, 0x44	; 68
    133c:	8a 83       	std	Y+2, r24	; 0x02
    133e:	09 c0       	rjmp	.+18     	; 0x1352 <CLCD_voidSendHex+0x20a>
	   case 14:Local_u8SecondDigit='E'; break;
    1340:	85 e4       	ldi	r24, 0x45	; 69
    1342:	8a 83       	std	Y+2, r24	; 0x02
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <CLCD_voidSendHex+0x20a>
	   case 15:Local_u8SecondDigit='F'; break;
    1346:	86 e4       	ldi	r24, 0x46	; 70
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <CLCD_voidSendHex+0x20a>
	   default:Local_u8SecondDigit=Local_u8Temp+'0';break;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	80 5d       	subi	r24, 0xD0	; 208
    1350:	8a 83       	std	Y+2, r24	; 0x02
	}
	CLCD_voidSendData(Local_u8FirstDigit);
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
	CLCD_voidSendData(Local_u8SecondDigit);
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
}
    135e:	62 96       	adiw	r28, 0x12	; 18
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <DCM_voidCW>:
#include "DIO_interface.h"
#include "DCM_interface.h"


void DCM_voidCW(DCM_cfg * Copy_pDCMcfg)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DCM_voidCW+0x6>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch1Pin,DIO_u8PIN_LOW);
    137e:	e9 81       	ldd	r30, Y+1	; 0x01
    1380:	fa 81       	ldd	r31, Y+2	; 0x02
    1382:	80 81       	ld	r24, Z
    1384:	e9 81       	ldd	r30, Y+1	; 0x01
    1386:	fa 81       	ldd	r31, Y+2	; 0x02
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	69 2f       	mov	r22, r25
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch2Pin,DIO_u8PIN_LOW);
    1392:	e9 81       	ldd	r30, Y+1	; 0x01
    1394:	fa 81       	ldd	r31, Y+2	; 0x02
    1396:	80 81       	ld	r24, Z
    1398:	e9 81       	ldd	r30, Y+1	; 0x01
    139a:	fa 81       	ldd	r31, Y+2	; 0x02
    139c:	92 81       	ldd	r25, Z+2	; 0x02
    139e:	69 2f       	mov	r22, r25
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch3Pin,DIO_u8PIN_LOW);
    13a6:	e9 81       	ldd	r30, Y+1	; 0x01
    13a8:	fa 81       	ldd	r31, Y+2	; 0x02
    13aa:	80 81       	ld	r24, Z
    13ac:	e9 81       	ldd	r30, Y+1	; 0x01
    13ae:	fa 81       	ldd	r31, Y+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	69 2f       	mov	r22, r25
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch4Pin,DIO_u8PIN_LOW);
    13ba:	e9 81       	ldd	r30, Y+1	; 0x01
    13bc:	fa 81       	ldd	r31, Y+2	; 0x02
    13be:	80 81       	ld	r24, Z
    13c0:	e9 81       	ldd	r30, Y+1	; 0x01
    13c2:	fa 81       	ldd	r31, Y+2	; 0x02
    13c4:	94 81       	ldd	r25, Z+4	; 0x04
    13c6:	69 2f       	mov	r22, r25
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>

    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch1Pin,DIO_u8PIN_HIGH);
    13ce:	e9 81       	ldd	r30, Y+1	; 0x01
    13d0:	fa 81       	ldd	r31, Y+2	; 0x02
    13d2:	80 81       	ld	r24, Z
    13d4:	e9 81       	ldd	r30, Y+1	; 0x01
    13d6:	fa 81       	ldd	r31, Y+2	; 0x02
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	69 2f       	mov	r22, r25
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch4Pin,DIO_u8PIN_HIGH);
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	80 81       	ld	r24, Z
    13e8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ea:	fa 81       	ldd	r31, Y+2	; 0x02
    13ec:	94 81       	ldd	r25, Z+4	; 0x04
    13ee:	69 2f       	mov	r22, r25
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <DCM_voidCCW>:

void DCM_voidCCW(DCM_cfg * Copy_pDCMcfg)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <DCM_voidCCW+0x6>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch1Pin,DIO_u8PIN_LOW);
    140e:	e9 81       	ldd	r30, Y+1	; 0x01
    1410:	fa 81       	ldd	r31, Y+2	; 0x02
    1412:	80 81       	ld	r24, Z
    1414:	e9 81       	ldd	r30, Y+1	; 0x01
    1416:	fa 81       	ldd	r31, Y+2	; 0x02
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	69 2f       	mov	r22, r25
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch2Pin,DIO_u8PIN_LOW);
    1422:	e9 81       	ldd	r30, Y+1	; 0x01
    1424:	fa 81       	ldd	r31, Y+2	; 0x02
    1426:	80 81       	ld	r24, Z
    1428:	e9 81       	ldd	r30, Y+1	; 0x01
    142a:	fa 81       	ldd	r31, Y+2	; 0x02
    142c:	92 81       	ldd	r25, Z+2	; 0x02
    142e:	69 2f       	mov	r22, r25
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch3Pin,DIO_u8PIN_LOW);
    1436:	e9 81       	ldd	r30, Y+1	; 0x01
    1438:	fa 81       	ldd	r31, Y+2	; 0x02
    143a:	80 81       	ld	r24, Z
    143c:	e9 81       	ldd	r30, Y+1	; 0x01
    143e:	fa 81       	ldd	r31, Y+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	69 2f       	mov	r22, r25
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch4Pin,DIO_u8PIN_LOW);
    144a:	e9 81       	ldd	r30, Y+1	; 0x01
    144c:	fa 81       	ldd	r31, Y+2	; 0x02
    144e:	80 81       	ld	r24, Z
    1450:	e9 81       	ldd	r30, Y+1	; 0x01
    1452:	fa 81       	ldd	r31, Y+2	; 0x02
    1454:	94 81       	ldd	r25, Z+4	; 0x04
    1456:	69 2f       	mov	r22, r25
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>

    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch2Pin,DIO_u8PIN_HIGH);
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	80 81       	ld	r24, Z
    1464:	e9 81       	ldd	r30, Y+1	; 0x01
    1466:	fa 81       	ldd	r31, Y+2	; 0x02
    1468:	92 81       	ldd	r25, Z+2	; 0x02
    146a:	69 2f       	mov	r22, r25
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch3Pin,DIO_u8PIN_HIGH);
    1472:	e9 81       	ldd	r30, Y+1	; 0x01
    1474:	fa 81       	ldd	r31, Y+2	; 0x02
    1476:	80 81       	ld	r24, Z
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	fa 81       	ldd	r31, Y+2	; 0x02
    147c:	93 81       	ldd	r25, Z+3	; 0x03
    147e:	69 2f       	mov	r22, r25
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <DCM_voidBrake>:

void DCM_voidBrake(DCM_cfg * Copy_pDCMcfg)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <DCM_voidBrake+0x6>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch1Pin,DIO_u8PIN_LOW);
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	80 81       	ld	r24, Z
    14a4:	e9 81       	ldd	r30, Y+1	; 0x01
    14a6:	fa 81       	ldd	r31, Y+2	; 0x02
    14a8:	91 81       	ldd	r25, Z+1	; 0x01
    14aa:	69 2f       	mov	r22, r25
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch2Pin,DIO_u8PIN_LOW);
    14b2:	e9 81       	ldd	r30, Y+1	; 0x01
    14b4:	fa 81       	ldd	r31, Y+2	; 0x02
    14b6:	80 81       	ld	r24, Z
    14b8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ba:	fa 81       	ldd	r31, Y+2	; 0x02
    14bc:	92 81       	ldd	r25, Z+2	; 0x02
    14be:	69 2f       	mov	r22, r25
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch3Pin,DIO_u8PIN_LOW);
    14c6:	e9 81       	ldd	r30, Y+1	; 0x01
    14c8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ca:	80 81       	ld	r24, Z
    14cc:	e9 81       	ldd	r30, Y+1	; 0x01
    14ce:	fa 81       	ldd	r31, Y+2	; 0x02
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	69 2f       	mov	r22, r25
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>
    DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch4Pin,DIO_u8PIN_LOW);
    14da:	e9 81       	ldd	r30, Y+1	; 0x01
    14dc:	fa 81       	ldd	r31, Y+2	; 0x02
    14de:	80 81       	ld	r24, Z
    14e0:	e9 81       	ldd	r30, Y+1	; 0x01
    14e2:	fa 81       	ldd	r31, Y+2	; 0x02
    14e4:	94 81       	ldd	r25, Z+4	; 0x04
    14e6:	69 2f       	mov	r22, r25
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8SetPinValue>


}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_prv.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	28 97       	sbiw	r28, 0x08	; 8
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	8a 83       	std	Y+2, r24	; 0x02
    150e:	6b 83       	std	Y+3, r22	; 0x03
    1510:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1512:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	88 30       	cpi	r24, 0x08	; 8
    1518:	08 f0       	brcs	.+2      	; 0x151c <DIO_u8SetPinDirection+0x24>
    151a:	f4 c0       	rjmp	.+488    	; 0x1704 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	88 23       	and	r24, r24
    1520:	09 f0       	breq	.+2      	; 0x1524 <DIO_u8SetPinDirection+0x2c>
    1522:	77 c0       	rjmp	.+238    	; 0x1612 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	38 87       	std	Y+8, r19	; 0x08
    152c:	2f 83       	std	Y+7, r18	; 0x07
    152e:	8f 81       	ldd	r24, Y+7	; 0x07
    1530:	98 85       	ldd	r25, Y+8	; 0x08
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	59 f1       	breq	.+86     	; 0x158e <DIO_u8SetPinDirection+0x96>
    1538:	2f 81       	ldd	r18, Y+7	; 0x07
    153a:	38 85       	ldd	r19, Y+8	; 0x08
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <DIO_u8SetPinDirection+0x54>
    1542:	8f 81       	ldd	r24, Y+7	; 0x07
    1544:	98 85       	ldd	r25, Y+8	; 0x08
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	69 f0       	breq	.+26     	; 0x1564 <DIO_u8SetPinDirection+0x6c>
    154a:	60 c0       	rjmp	.+192    	; 0x160c <DIO_u8SetPinDirection+0x114>
    154c:	2f 81       	ldd	r18, Y+7	; 0x07
    154e:	38 85       	ldd	r19, Y+8	; 0x08
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	89 f1       	breq	.+98     	; 0x15b8 <DIO_u8SetPinDirection+0xc0>
    1556:	8f 81       	ldd	r24, Y+7	; 0x07
    1558:	98 85       	ldd	r25, Y+8	; 0x08
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <DIO_u8SetPinDirection+0x6a>
    1560:	40 c0       	rjmp	.+128    	; 0x15e2 <DIO_u8SetPinDirection+0xea>
    1562:	54 c0       	rjmp	.+168    	; 0x160c <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    1564:	aa e3       	ldi	r26, 0x3A	; 58
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ea e3       	ldi	r30, 0x3A	; 58
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_u8SetPinDirection+0x8a>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_u8SetPinDirection+0x86>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	bd c0       	rjmp	.+378    	; 0x1708 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    158e:	a7 e3       	ldi	r26, 0x37	; 55
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e7 e3       	ldi	r30, 0x37	; 55
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_u8SetPinDirection+0xb4>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_u8SetPinDirection+0xb0>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	a8 c0       	rjmp	.+336    	; 0x1708 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    15b8:	a4 e3       	ldi	r26, 0x34	; 52
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e4 e3       	ldi	r30, 0x34	; 52
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_u8SetPinDirection+0xde>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_u8SetPinDirection+0xda>
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	93 c0       	rjmp	.+294    	; 0x1708 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    15e2:	a1 e3       	ldi	r26, 0x31	; 49
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e1 e3       	ldi	r30, 0x31	; 49
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_u8SetPinDirection+0x108>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_u8SetPinDirection+0x104>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	7e c0       	rjmp	.+252    	; 0x1708 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState= NOK; break;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	7b c0       	rjmp	.+246    	; 0x1708 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1612:	8c 81       	ldd	r24, Y+4	; 0x04
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	09 f0       	breq	.+2      	; 0x161a <DIO_u8SetPinDirection+0x122>
    1618:	72 c0       	rjmp	.+228    	; 0x16fe <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3e 83       	std	Y+6, r19	; 0x06
    1622:	2d 83       	std	Y+5, r18	; 0x05
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	91 05       	cpc	r25, r1
    162c:	49 f1       	breq	.+82     	; 0x1680 <DIO_u8SetPinDirection+0x188>
    162e:	2d 81       	ldd	r18, Y+5	; 0x05
    1630:	3e 81       	ldd	r19, Y+6	; 0x06
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	2c f4       	brge	.+10     	; 0x1642 <DIO_u8SetPinDirection+0x14a>
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	61 f0       	breq	.+24     	; 0x1658 <DIO_u8SetPinDirection+0x160>
    1640:	5b c0       	rjmp	.+182    	; 0x16f8 <DIO_u8SetPinDirection+0x200>
    1642:	2d 81       	ldd	r18, Y+5	; 0x05
    1644:	3e 81       	ldd	r19, Y+6	; 0x06
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	71 f1       	breq	.+92     	; 0x16a8 <DIO_u8SetPinDirection+0x1b0>
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	91 05       	cpc	r25, r1
    1654:	e9 f1       	breq	.+122    	; 0x16d0 <DIO_u8SetPinDirection+0x1d8>
    1656:	50 c0       	rjmp	.+160    	; 0x16f8 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    1658:	aa e3       	ldi	r26, 0x3A	; 58
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ea e3       	ldi	r30, 0x3A	; 58
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_u8SetPinDirection+0x17e>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <DIO_u8SetPinDirection+0x17a>
    167a:	84 2b       	or	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	44 c0       	rjmp	.+136    	; 0x1708 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1680:	a7 e3       	ldi	r26, 0x37	; 55
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e7 e3       	ldi	r30, 0x37	; 55
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_u8SetPinDirection+0x1a6>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_u8SetPinDirection+0x1a2>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	30 c0       	rjmp	.+96     	; 0x1708 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    16a8:	a4 e3       	ldi	r26, 0x34	; 52
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e4 e3       	ldi	r30, 0x34	; 52
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <DIO_u8SetPinDirection+0x1ce>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <DIO_u8SetPinDirection+0x1ca>
    16ca:	84 2b       	or	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	1c c0       	rjmp	.+56     	; 0x1708 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    16d0:	a1 e3       	ldi	r26, 0x31	; 49
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e1 e3       	ldi	r30, 0x31	; 49
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <DIO_u8SetPinDirection+0x1f6>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <DIO_u8SetPinDirection+0x1f2>
    16f2:	84 2b       	or	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	08 c0       	rjmp	.+16     	; 0x1708 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState= NOK; break;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1708:	89 81       	ldd	r24, Y+1	; 0x01
}
    170a:	28 96       	adiw	r28, 0x08	; 8
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	28 97       	sbiw	r28, 0x08	; 8
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	8a 83       	std	Y+2, r24	; 0x02
    1732:	6b 83       	std	Y+3, r22	; 0x03
    1734:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrorState = OK;
    1736:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	88 30       	cpi	r24, 0x08	; 8
    173c:	08 f0       	brcs	.+2      	; 0x1740 <DIO_u8SetPinValue+0x24>
    173e:	f4 c0       	rjmp	.+488    	; 0x1928 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	88 23       	and	r24, r24
    1744:	09 f0       	breq	.+2      	; 0x1748 <DIO_u8SetPinValue+0x2c>
    1746:	77 c0       	rjmp	.+238    	; 0x1836 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	38 87       	std	Y+8, r19	; 0x08
    1750:	2f 83       	std	Y+7, r18	; 0x07
    1752:	8f 81       	ldd	r24, Y+7	; 0x07
    1754:	98 85       	ldd	r25, Y+8	; 0x08
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	59 f1       	breq	.+86     	; 0x17b2 <DIO_u8SetPinValue+0x96>
    175c:	2f 81       	ldd	r18, Y+7	; 0x07
    175e:	38 85       	ldd	r19, Y+8	; 0x08
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	2c f4       	brge	.+10     	; 0x1770 <DIO_u8SetPinValue+0x54>
    1766:	8f 81       	ldd	r24, Y+7	; 0x07
    1768:	98 85       	ldd	r25, Y+8	; 0x08
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	69 f0       	breq	.+26     	; 0x1788 <DIO_u8SetPinValue+0x6c>
    176e:	60 c0       	rjmp	.+192    	; 0x1830 <DIO_u8SetPinValue+0x114>
    1770:	2f 81       	ldd	r18, Y+7	; 0x07
    1772:	38 85       	ldd	r19, Y+8	; 0x08
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	89 f1       	breq	.+98     	; 0x17dc <DIO_u8SetPinValue+0xc0>
    177a:	8f 81       	ldd	r24, Y+7	; 0x07
    177c:	98 85       	ldd	r25, Y+8	; 0x08
    177e:	83 30       	cpi	r24, 0x03	; 3
    1780:	91 05       	cpc	r25, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <DIO_u8SetPinValue+0x6a>
    1784:	40 c0       	rjmp	.+128    	; 0x1806 <DIO_u8SetPinValue+0xea>
    1786:	54 c0       	rjmp	.+168    	; 0x1830 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1788:	ab e3       	ldi	r26, 0x3B	; 59
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	eb e3       	ldi	r30, 0x3B	; 59
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_u8SetPinValue+0x8a>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_u8SetPinValue+0x86>
    17aa:	80 95       	com	r24
    17ac:	84 23       	and	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	bd c0       	rjmp	.+378    	; 0x192c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    17b2:	a8 e3       	ldi	r26, 0x38	; 56
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e8 e3       	ldi	r30, 0x38	; 56
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <DIO_u8SetPinValue+0xb4>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <DIO_u8SetPinValue+0xb0>
    17d4:	80 95       	com	r24
    17d6:	84 23       	and	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	a8 c0       	rjmp	.+336    	; 0x192c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    17dc:	a5 e3       	ldi	r26, 0x35	; 53
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e5 e3       	ldi	r30, 0x35	; 53
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_u8SetPinValue+0xde>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_u8SetPinValue+0xda>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	93 c0       	rjmp	.+294    	; 0x192c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1806:	a2 e3       	ldi	r26, 0x32	; 50
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e2 e3       	ldi	r30, 0x32	; 50
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <DIO_u8SetPinValue+0x108>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <DIO_u8SetPinValue+0x104>
    1828:	80 95       	com	r24
    182a:	84 23       	and	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	7e c0       	rjmp	.+252    	; 0x192c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState= NOK; break;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	7b c0       	rjmp	.+246    	; 0x192c <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	09 f0       	breq	.+2      	; 0x183e <DIO_u8SetPinValue+0x122>
    183c:	72 c0       	rjmp	.+228    	; 0x1922 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3e 83       	std	Y+6, r19	; 0x06
    1846:	2d 83       	std	Y+5, r18	; 0x05
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	91 05       	cpc	r25, r1
    1850:	49 f1       	breq	.+82     	; 0x18a4 <DIO_u8SetPinValue+0x188>
    1852:	2d 81       	ldd	r18, Y+5	; 0x05
    1854:	3e 81       	ldd	r19, Y+6	; 0x06
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	2c f4       	brge	.+10     	; 0x1866 <DIO_u8SetPinValue+0x14a>
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	61 f0       	breq	.+24     	; 0x187c <DIO_u8SetPinValue+0x160>
    1864:	5b c0       	rjmp	.+182    	; 0x191c <DIO_u8SetPinValue+0x200>
    1866:	2d 81       	ldd	r18, Y+5	; 0x05
    1868:	3e 81       	ldd	r19, Y+6	; 0x06
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	71 f1       	breq	.+92     	; 0x18cc <DIO_u8SetPinValue+0x1b0>
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	91 05       	cpc	r25, r1
    1878:	e9 f1       	breq	.+122    	; 0x18f4 <DIO_u8SetPinValue+0x1d8>
    187a:	50 c0       	rjmp	.+160    	; 0x191c <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    187c:	ab e3       	ldi	r26, 0x3B	; 59
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	eb e3       	ldi	r30, 0x3B	; 59
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 2e       	mov	r0, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_u8SetPinValue+0x17e>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	0a 94       	dec	r0
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <DIO_u8SetPinValue+0x17a>
    189e:	84 2b       	or	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	44 c0       	rjmp	.+136    	; 0x192c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    18a4:	a8 e3       	ldi	r26, 0x38	; 56
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e8 e3       	ldi	r30, 0x38	; 56
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <DIO_u8SetPinValue+0x1a6>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <DIO_u8SetPinValue+0x1a2>
    18c6:	84 2b       	or	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	30 c0       	rjmp	.+96     	; 0x192c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    18cc:	a5 e3       	ldi	r26, 0x35	; 53
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e5 e3       	ldi	r30, 0x35	; 53
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 2e       	mov	r0, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_u8SetPinValue+0x1ce>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	0a 94       	dec	r0
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_u8SetPinValue+0x1ca>
    18ee:	84 2b       	or	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	1c c0       	rjmp	.+56     	; 0x192c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    18f4:	a2 e3       	ldi	r26, 0x32	; 50
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e2 e3       	ldi	r30, 0x32	; 50
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_u8SetPinValue+0x1f6>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_u8SetPinValue+0x1f2>
    1916:	84 2b       	or	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	08 c0       	rjmp	.+16     	; 0x192c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState= NOK; break;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	05 c0       	rjmp	.+10     	; 0x192c <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    192c:	89 81       	ldd	r24, Y+1	; 0x01

}
    192e:	28 96       	adiw	r28, 0x08	; 8
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	27 97       	sbiw	r28, 0x07	; 7
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	8a 83       	std	Y+2, r24	; 0x02
    1956:	6b 83       	std	Y+3, r22	; 0x03
    1958:	5d 83       	std	Y+5, r21	; 0x05
    195a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    195c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL)
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	9d 81       	ldd	r25, Y+5	; 0x05
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	09 f4       	brne	.+2      	; 0x1968 <DIO_u8GetPinValue+0x28>
    1966:	7b c0       	rjmp	.+246    	; 0x1a5e <DIO_u8GetPinValue+0x11e>
	{
		if(Copy_u8Pin<= DIO_u8PIN7)
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	88 30       	cpi	r24, 0x08	; 8
    196c:	08 f0       	brcs	.+2      	; 0x1970 <DIO_u8GetPinValue+0x30>
    196e:	74 c0       	rjmp	.+232    	; 0x1a58 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3f 83       	std	Y+7, r19	; 0x07
    1978:	2e 83       	std	Y+6, r18	; 0x06
    197a:	4e 81       	ldd	r20, Y+6	; 0x06
    197c:	5f 81       	ldd	r21, Y+7	; 0x07
    197e:	41 30       	cpi	r20, 0x01	; 1
    1980:	51 05       	cpc	r21, r1
    1982:	59 f1       	breq	.+86     	; 0x19da <DIO_u8GetPinValue+0x9a>
    1984:	8e 81       	ldd	r24, Y+6	; 0x06
    1986:	9f 81       	ldd	r25, Y+7	; 0x07
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	91 05       	cpc	r25, r1
    198c:	34 f4       	brge	.+12     	; 0x199a <DIO_u8GetPinValue+0x5a>
    198e:	2e 81       	ldd	r18, Y+6	; 0x06
    1990:	3f 81       	ldd	r19, Y+7	; 0x07
    1992:	21 15       	cp	r18, r1
    1994:	31 05       	cpc	r19, r1
    1996:	69 f0       	breq	.+26     	; 0x19b2 <DIO_u8GetPinValue+0x72>
    1998:	5c c0       	rjmp	.+184    	; 0x1a52 <DIO_u8GetPinValue+0x112>
    199a:	4e 81       	ldd	r20, Y+6	; 0x06
    199c:	5f 81       	ldd	r21, Y+7	; 0x07
    199e:	42 30       	cpi	r20, 0x02	; 2
    19a0:	51 05       	cpc	r21, r1
    19a2:	79 f1       	breq	.+94     	; 0x1a02 <DIO_u8GetPinValue+0xc2>
    19a4:	8e 81       	ldd	r24, Y+6	; 0x06
    19a6:	9f 81       	ldd	r25, Y+7	; 0x07
    19a8:	83 30       	cpi	r24, 0x03	; 3
    19aa:	91 05       	cpc	r25, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <DIO_u8GetPinValue+0x70>
    19ae:	3d c0       	rjmp	.+122    	; 0x1a2a <DIO_u8GetPinValue+0xea>
    19b0:	50 c0       	rjmp	.+160    	; 0x1a52 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value= GET_BIT(PINA, Copy_u8Pin); break;
    19b2:	e9 e3       	ldi	r30, 0x39	; 57
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	88 2f       	mov	r24, r24
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a9 01       	movw	r20, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <DIO_u8GetPinValue+0x8a>
    19c6:	55 95       	asr	r21
    19c8:	47 95       	ror	r20
    19ca:	8a 95       	dec	r24
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <DIO_u8GetPinValue+0x86>
    19ce:	ca 01       	movw	r24, r20
    19d0:	81 70       	andi	r24, 0x01	; 1
    19d2:	ec 81       	ldd	r30, Y+4	; 0x04
    19d4:	fd 81       	ldd	r31, Y+5	; 0x05
    19d6:	80 83       	st	Z, r24
    19d8:	44 c0       	rjmp	.+136    	; 0x1a62 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTB: *Copy_pu8Value= GET_BIT(PINB, Copy_u8Pin); break;
    19da:	e6 e3       	ldi	r30, 0x36	; 54
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a9 01       	movw	r20, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <DIO_u8GetPinValue+0xb2>
    19ee:	55 95       	asr	r21
    19f0:	47 95       	ror	r20
    19f2:	8a 95       	dec	r24
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <DIO_u8GetPinValue+0xae>
    19f6:	ca 01       	movw	r24, r20
    19f8:	81 70       	andi	r24, 0x01	; 1
    19fa:	ec 81       	ldd	r30, Y+4	; 0x04
    19fc:	fd 81       	ldd	r31, Y+5	; 0x05
    19fe:	80 83       	st	Z, r24
    1a00:	30 c0       	rjmp	.+96     	; 0x1a62 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTC: *Copy_pu8Value= GET_BIT(PINC, Copy_u8Pin); break;
    1a02:	e3 e3       	ldi	r30, 0x33	; 51
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a9 01       	movw	r20, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <DIO_u8GetPinValue+0xda>
    1a16:	55 95       	asr	r21
    1a18:	47 95       	ror	r20
    1a1a:	8a 95       	dec	r24
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <DIO_u8GetPinValue+0xd6>
    1a1e:	ca 01       	movw	r24, r20
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	ec 81       	ldd	r30, Y+4	; 0x04
    1a24:	fd 81       	ldd	r31, Y+5	; 0x05
    1a26:	80 83       	st	Z, r24
    1a28:	1c c0       	rjmp	.+56     	; 0x1a62 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTD: *Copy_pu8Value= GET_BIT(PIND, Copy_u8Pin); break;
    1a2a:	e0 e3       	ldi	r30, 0x30	; 48
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_u8GetPinValue+0x102>
    1a3e:	55 95       	asr	r21
    1a40:	47 95       	ror	r20
    1a42:	8a 95       	dec	r24
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <DIO_u8GetPinValue+0xfe>
    1a46:	ca 01       	movw	r24, r20
    1a48:	81 70       	andi	r24, 0x01	; 1
    1a4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a4c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a4e:	80 83       	st	Z, r24
    1a50:	08 c0       	rjmp	.+16     	; 0x1a62 <DIO_u8GetPinValue+0x122>
			default: Local_u8ErrorState= NOK; break;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <DIO_u8GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a64:	27 96       	adiw	r28, 0x07	; 7
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <DIO_u8SetPortDirection+0x6>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <DIO_u8SetPortDirection+0x8>
    1a7e:	0f 92       	push	r0
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	8a 83       	std	Y+2, r24	; 0x02
    1a86:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1a88:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	3d 83       	std	Y+5, r19	; 0x05
    1a92:	2c 83       	std	Y+4, r18	; 0x04
    1a94:	8c 81       	ldd	r24, Y+4	; 0x04
    1a96:	9d 81       	ldd	r25, Y+5	; 0x05
    1a98:	81 30       	cpi	r24, 0x01	; 1
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	d1 f0       	breq	.+52     	; 0x1ad2 <DIO_u8SetPortDirection+0x5c>
    1a9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa0:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa2:	22 30       	cpi	r18, 0x02	; 2
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	2c f4       	brge	.+10     	; 0x1ab2 <DIO_u8SetPortDirection+0x3c>
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	61 f0       	breq	.+24     	; 0x1ac8 <DIO_u8SetPortDirection+0x52>
    1ab0:	1f c0       	rjmp	.+62     	; 0x1af0 <DIO_u8SetPortDirection+0x7a>
    1ab2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab6:	22 30       	cpi	r18, 0x02	; 2
    1ab8:	31 05       	cpc	r19, r1
    1aba:	81 f0       	breq	.+32     	; 0x1adc <DIO_u8SetPortDirection+0x66>
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac0:	83 30       	cpi	r24, 0x03	; 3
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	81 f0       	breq	.+32     	; 0x1ae6 <DIO_u8SetPortDirection+0x70>
    1ac6:	14 c0       	rjmp	.+40     	; 0x1af0 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
    1ac8:	ea e3       	ldi	r30, 0x3A	; 58
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	80 83       	st	Z, r24
    1ad0:	11 c0       	rjmp	.+34     	; 0x1af4 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
    1ad2:	e7 e3       	ldi	r30, 0x37	; 55
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	80 83       	st	Z, r24
    1ada:	0c c0       	rjmp	.+24     	; 0x1af4 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
    1adc:	e4 e3       	ldi	r30, 0x34	; 52
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	80 83       	st	Z, r24
    1ae4:	07 c0       	rjmp	.+14     	; 0x1af4 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
    1ae6:	e1 e3       	ldi	r30, 0x31	; 49
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	80 83       	st	Z, r24
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState= NOK; break;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <DIO_u8SetPortValue+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <DIO_u8SetPortValue+0x8>
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	8a 83       	std	Y+2, r24	; 0x02
    1b16:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1b18:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3d 83       	std	Y+5, r19	; 0x05
    1b22:	2c 83       	std	Y+4, r18	; 0x04
    1b24:	8c 81       	ldd	r24, Y+4	; 0x04
    1b26:	9d 81       	ldd	r25, Y+5	; 0x05
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	d1 f0       	breq	.+52     	; 0x1b62 <DIO_u8SetPortValue+0x5c>
    1b2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b30:	3d 81       	ldd	r19, Y+5	; 0x05
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <DIO_u8SetPortValue+0x3c>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <DIO_u8SetPortValue+0x52>
    1b40:	1f c0       	rjmp	.+62     	; 0x1b80 <DIO_u8SetPortValue+0x7a>
    1b42:	2c 81       	ldd	r18, Y+4	; 0x04
    1b44:	3d 81       	ldd	r19, Y+5	; 0x05
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	81 f0       	breq	.+32     	; 0x1b6c <DIO_u8SetPortValue+0x66>
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	83 30       	cpi	r24, 0x03	; 3
    1b52:	91 05       	cpc	r25, r1
    1b54:	81 f0       	breq	.+32     	; 0x1b76 <DIO_u8SetPortValue+0x70>
    1b56:	14 c0       	rjmp	.+40     	; 0x1b80 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1b58:	eb e3       	ldi	r30, 0x3B	; 59
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	80 83       	st	Z, r24
    1b60:	11 c0       	rjmp	.+34     	; 0x1b84 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1b62:	e8 e3       	ldi	r30, 0x38	; 56
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	80 83       	st	Z, r24
    1b6a:	0c c0       	rjmp	.+24     	; 0x1b84 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1b6c:	e5 e3       	ldi	r30, 0x35	; 53
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	80 83       	st	Z, r24
    1b74:	07 c0       	rjmp	.+14     	; 0x1b84 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1b76:	e2 e3       	ldi	r30, 0x32	; 50
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	80 83       	st	Z, r24
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState= NOK; break;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <DIO_u8TogglePinValue+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <DIO_u8TogglePinValue+0x8>
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	8a 83       	std	Y+2, r24	; 0x02
    1ba6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1ba8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	88 30       	cpi	r24, 0x08	; 8
    1bae:	08 f0       	brcs	.+2      	; 0x1bb2 <DIO_u8TogglePinValue+0x1c>
    1bb0:	72 c0       	rjmp	.+228    	; 0x1c96 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	3d 83       	std	Y+5, r19	; 0x05
    1bba:	2c 83       	std	Y+4, r18	; 0x04
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	49 f1       	breq	.+82     	; 0x1c18 <DIO_u8TogglePinValue+0x82>
    1bc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bca:	22 30       	cpi	r18, 0x02	; 2
    1bcc:	31 05       	cpc	r19, r1
    1bce:	2c f4       	brge	.+10     	; 0x1bda <DIO_u8TogglePinValue+0x44>
    1bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	61 f0       	breq	.+24     	; 0x1bf0 <DIO_u8TogglePinValue+0x5a>
    1bd8:	5b c0       	rjmp	.+182    	; 0x1c90 <DIO_u8TogglePinValue+0xfa>
    1bda:	2c 81       	ldd	r18, Y+4	; 0x04
    1bdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	71 f1       	breq	.+92     	; 0x1c40 <DIO_u8TogglePinValue+0xaa>
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	9d 81       	ldd	r25, Y+5	; 0x05
    1be8:	83 30       	cpi	r24, 0x03	; 3
    1bea:	91 05       	cpc	r25, r1
    1bec:	e9 f1       	breq	.+122    	; 0x1c68 <DIO_u8TogglePinValue+0xd2>
    1bee:	50 c0       	rjmp	.+160    	; 0x1c90 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin); break;
    1bf0:	ab e3       	ldi	r26, 0x3B	; 59
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	eb e3       	ldi	r30, 0x3B	; 59
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_u8TogglePinValue+0x78>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_u8TogglePinValue+0x74>
    1c12:	84 27       	eor	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	41 c0       	rjmp	.+130    	; 0x1c9a <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin); break;
    1c18:	a8 e3       	ldi	r26, 0x38	; 56
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e8 e3       	ldi	r30, 0x38	; 56
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_u8TogglePinValue+0xa0>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <DIO_u8TogglePinValue+0x9c>
    1c3a:	84 27       	eor	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	2d c0       	rjmp	.+90     	; 0x1c9a <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin); break;
    1c40:	a5 e3       	ldi	r26, 0x35	; 53
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e3       	ldi	r30, 0x35	; 53
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <DIO_u8TogglePinValue+0xc8>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <DIO_u8TogglePinValue+0xc4>
    1c62:	84 27       	eor	r24, r20
    1c64:	8c 93       	st	X, r24
    1c66:	19 c0       	rjmp	.+50     	; 0x1c9a <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin); break;
    1c68:	a2 e3       	ldi	r26, 0x32	; 50
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e2 e3       	ldi	r30, 0x32	; 50
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 2e       	mov	r0, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <DIO_u8TogglePinValue+0xf0>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <DIO_u8TogglePinValue+0xec>
    1c8a:	84 27       	eor	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState= NOK; break;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <PORT_voidInit>:
#include "PORT_interface.h"
#include "PORT_cfg.h"
#include "PORT_private.h"

void PORT_voidInit(void)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1cb4:	ea e3       	ldi	r30, 0x3A	; 58
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	8e e7       	ldi	r24, 0x7E	; 126
    1cba:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1cbc:	e7 e3       	ldi	r30, 0x37	; 55
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	8f e1       	ldi	r24, 0x1F	; 31
    1cc2:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1cc4:	e4 e3       	ldi	r30, 0x34	; 52
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    1cca:	e1 e3       	ldi	r30, 0x31	; 49
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	10 82       	st	Z, r1

	PORTA= PORTA_INITIAL_VAL;
    1cd0:	eb e3       	ldi	r30, 0x3B	; 59
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	10 82       	st	Z, r1
	PORTB= PORTB_INITIAL_VAL;
    1cd6:	e8 e3       	ldi	r30, 0x38	; 56
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	10 82       	st	Z, r1
	PORTC= PORTC_INITIAL_VAL;
    1cdc:	e5 e3       	ldi	r30, 0x35	; 53
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	10 82       	st	Z, r1
	PORTD= PORTD_INITIAL_VAL;
    1ce2:	e2 e3       	ldi	r30, 0x32	; 50
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	10 82       	st	Z, r1

}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <main>:
#include "CLCD_interface.h"
#include "DCM_interface.h"
#include <util/delay.h>

void main (void)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	28 97       	sbiw	r28, 0x08	; 8
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    1d02:	0e 94 56 0e 	call	0x1cac	; 0x1cac <PORT_voidInit>
    CLCD_voidInit();
    1d06:	0e 94 90 06 	call	0xd20	; 0xd20 <CLCD_voidInit>
	DCM_cfg DCM_Object;
	DCM_Object.DCM_u8SwitchPort=DIO_u8PORTB;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	89 83       	std	Y+1, r24	; 0x01
	DCM_Object.DCM_u8Switch1Pin=DIO_u8PIN0;
    1d0e:	1a 82       	std	Y+2, r1	; 0x02
	DCM_Object.DCM_u8Switch2Pin=DIO_u8PIN2;
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	8b 83       	std	Y+3, r24	; 0x03
	DCM_Object.DCM_u8Switch3Pin=DIO_u8PIN2;
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	8c 83       	std	Y+4, r24	; 0x04
	DCM_Object.DCM_u8Switch4Pin=DIO_u8PIN1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	8d 83       	std	Y+5, r24	; 0x05
    uint8 Local_u8Button1=1,Local_u8Button2=1,Local_u8Button3=1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	8e 83       	std	Y+6, r24	; 0x06
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	8f 83       	std	Y+7, r24	; 0x07
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	88 87       	std	Y+8, r24	; 0x08



     CLCD_u8SendString("Press SW 1 CW");
    1d28:	86 e6       	ldi	r24, 0x66	; 102
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
     CLCD_viodGoToXY(0,1);
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_viodGoToXY>
     CLCD_u8SendString("Press SW 2 CCW");
    1d38:	84 e7       	ldi	r24, 0x74	; 116
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    1d40:	28 c0       	rjmp	.+80     	; 0x1d92 <main+0xa4>

	while(1)
	{
		while(Local_u8Button1!=0 && Local_u8Button2!=0)
		{
			CLCD_viodGoToXY(0,0);
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_viodGoToXY>
		    CLCD_u8SendString("Press SW 1 CW");
    1d4a:	86 e6       	ldi	r24, 0x66	; 102
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
		    CLCD_viodGoToXY(0,1);
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	61 e0       	ldi	r22, 0x01	; 1
    1d56:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CLCD_viodGoToXY>
		    CLCD_u8SendString("Press SW 2 CCW");
    1d5a:	84 e7       	ldi	r24, 0x74	; 116
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
		    DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN2,&Local_u8Button1);
    1d62:	9e 01       	movw	r18, r28
    1d64:	2a 5f       	subi	r18, 0xFA	; 250
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	83 e0       	ldi	r24, 0x03	; 3
    1d6a:	62 e0       	ldi	r22, 0x02	; 2
    1d6c:	a9 01       	movw	r20, r18
    1d6e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_u8GetPinValue>
		    DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN3,&Local_u8Button2);
    1d72:	9e 01       	movw	r18, r28
    1d74:	29 5f       	subi	r18, 0xF9	; 249
    1d76:	3f 4f       	sbci	r19, 0xFF	; 255
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	63 e0       	ldi	r22, 0x03	; 3
    1d7c:	a9 01       	movw	r20, r18
    1d7e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_u8GetPinValue>
	   	    DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
    1d82:	9e 01       	movw	r18, r28
    1d84:	28 5f       	subi	r18, 0xF8	; 248
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	83 e0       	ldi	r24, 0x03	; 3
    1d8a:	64 e0       	ldi	r22, 0x04	; 4
    1d8c:	a9 01       	movw	r20, r18
    1d8e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_u8GetPinValue>
     CLCD_viodGoToXY(0,1);
     CLCD_u8SendString("Press SW 2 CCW");

	while(1)
	{
		while(Local_u8Button1!=0 && Local_u8Button2!=0)
    1d92:	8e 81       	ldd	r24, Y+6	; 0x06
    1d94:	88 23       	and	r24, r24
    1d96:	19 f0       	breq	.+6      	; 0x1d9e <main+0xb0>
    1d98:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9a:	88 23       	and	r24, r24
    1d9c:	91 f6       	brne	.-92     	; 0x1d42 <main+0x54>
		    DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN2,&Local_u8Button1);
		    DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN3,&Local_u8Button2);
	   	    DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
		}

		   if(Local_u8Button1==0)
    1d9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1da0:	88 23       	and	r24, r24
    1da2:	d1 f5       	brne	.+116    	; 0x1e18 <main+0x12a>
		   {
			   CLCD_voidSendCmd(1);
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
			   CLCD_u8SendString("Press SW3 Stop");
    1daa:	83 e8       	ldi	r24, 0x83	; 131
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
			   DCM_voidCW(&DCM_Object);
    1db2:	ce 01       	movw	r24, r28
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	0e 94 b8 09 	call	0x1370	; 0x1370 <DCM_voidCW>
    1dba:	08 c0       	rjmp	.+16     	; 0x1dcc <main+0xde>
			   while(Local_u8Button1==0)
			    {
			  	   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN2,&Local_u8Button1);
    1dbc:	9e 01       	movw	r18, r28
    1dbe:	2a 5f       	subi	r18, 0xFA	; 250
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	83 e0       	ldi	r24, 0x03	; 3
    1dc4:	62 e0       	ldi	r22, 0x02	; 2
    1dc6:	a9 01       	movw	r20, r18
    1dc8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_u8GetPinValue>
		   if(Local_u8Button1==0)
		   {
			   CLCD_voidSendCmd(1);
			   CLCD_u8SendString("Press SW3 Stop");
			   DCM_voidCW(&DCM_Object);
			   while(Local_u8Button1==0)
    1dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dce:	88 23       	and	r24, r24
    1dd0:	a9 f3       	breq	.-22     	; 0x1dbc <main+0xce>
    1dd2:	08 c0       	rjmp	.+16     	; 0x1de4 <main+0xf6>
			  	   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN2,&Local_u8Button1);
			    }
			   while(Local_u8Button3!=0)
			   {

				   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
    1dd4:	9e 01       	movw	r18, r28
    1dd6:	28 5f       	subi	r18, 0xF8	; 248
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	64 e0       	ldi	r22, 0x04	; 4
    1dde:	a9 01       	movw	r20, r18
    1de0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_u8GetPinValue>
			   DCM_voidCW(&DCM_Object);
			   while(Local_u8Button1==0)
			    {
			  	   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN2,&Local_u8Button1);
			    }
			   while(Local_u8Button3!=0)
    1de4:	88 85       	ldd	r24, Y+8	; 0x08
    1de6:	88 23       	and	r24, r24
    1de8:	a9 f7       	brne	.-22     	; 0x1dd4 <main+0xe6>
			   {

				   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
			   }
			   if(Local_u8Button3==0)
    1dea:	88 85       	ldd	r24, Y+8	; 0x08
    1dec:	88 23       	and	r24, r24
    1dee:	89 f6       	brne	.-94     	; 0x1d92 <main+0xa4>
			   {
				   DCM_voidBrake(&DCM_Object);
    1df0:	ce 01       	movw	r24, r28
    1df2:	01 96       	adiw	r24, 0x01	; 1
    1df4:	0e 94 48 0a 	call	0x1490	; 0x1490 <DCM_voidBrake>
    1df8:	08 c0       	rjmp	.+16     	; 0x1e0a <main+0x11c>
				   while(Local_u8Button3==0)
				    {
				  	   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
    1dfa:	9e 01       	movw	r18, r28
    1dfc:	28 5f       	subi	r18, 0xF8	; 248
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	a9 01       	movw	r20, r18
    1e06:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_u8GetPinValue>
				   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
			   }
			   if(Local_u8Button3==0)
			   {
				   DCM_voidBrake(&DCM_Object);
				   while(Local_u8Button3==0)
    1e0a:	88 85       	ldd	r24, Y+8	; 0x08
    1e0c:	88 23       	and	r24, r24
    1e0e:	a9 f3       	breq	.-22     	; 0x1dfa <main+0x10c>
				    {
				  	   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
				    }
				   CLCD_voidSendCmd(1);
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
    1e16:	bd cf       	rjmp	.-134    	; 0x1d92 <main+0xa4>
			   }
		   }
		   else if(Local_u8Button2==0)
    1e18:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <main+0x132>
    1e1e:	b9 cf       	rjmp	.-142    	; 0x1d92 <main+0xa4>
		   {
			   CLCD_voidSendCmd(1);
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
			   CLCD_u8SendString("Press SW3 Stop");
    1e26:	83 e8       	ldi	r24, 0x83	; 131
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
			   DCM_voidCCW(&DCM_Object);
    1e2e:	ce 01       	movw	r24, r28
    1e30:	01 96       	adiw	r24, 0x01	; 1
    1e32:	0e 94 00 0a 	call	0x1400	; 0x1400 <DCM_voidCCW>
    1e36:	08 c0       	rjmp	.+16     	; 0x1e48 <main+0x15a>
			   while(Local_u8Button2==0)
			    {
			  	   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN3,&Local_u8Button2);
    1e38:	9e 01       	movw	r18, r28
    1e3a:	29 5f       	subi	r18, 0xF9	; 249
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	83 e0       	ldi	r24, 0x03	; 3
    1e40:	63 e0       	ldi	r22, 0x03	; 3
    1e42:	a9 01       	movw	r20, r18
    1e44:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_u8GetPinValue>
		   else if(Local_u8Button2==0)
		   {
			   CLCD_voidSendCmd(1);
			   CLCD_u8SendString("Press SW3 Stop");
			   DCM_voidCCW(&DCM_Object);
			   while(Local_u8Button2==0)
    1e48:	8f 81       	ldd	r24, Y+7	; 0x07
    1e4a:	88 23       	and	r24, r24
    1e4c:	a9 f3       	breq	.-22     	; 0x1e38 <main+0x14a>
    1e4e:	08 c0       	rjmp	.+16     	; 0x1e60 <main+0x172>
			  	   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN3,&Local_u8Button2);
			     }
			   while(Local_u8Button3!=0)
			   {

				   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
    1e50:	9e 01       	movw	r18, r28
    1e52:	28 5f       	subi	r18, 0xF8	; 248
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	64 e0       	ldi	r22, 0x04	; 4
    1e5a:	a9 01       	movw	r20, r18
    1e5c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_u8GetPinValue>
			   DCM_voidCCW(&DCM_Object);
			   while(Local_u8Button2==0)
			    {
			  	   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN3,&Local_u8Button2);
			     }
			   while(Local_u8Button3!=0)
    1e60:	88 85       	ldd	r24, Y+8	; 0x08
    1e62:	88 23       	and	r24, r24
    1e64:	a9 f7       	brne	.-22     	; 0x1e50 <main+0x162>
			   {

				   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
			   }
			   if(Local_u8Button3==0)
    1e66:	88 85       	ldd	r24, Y+8	; 0x08
    1e68:	88 23       	and	r24, r24
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <main+0x180>
    1e6c:	92 cf       	rjmp	.-220    	; 0x1d92 <main+0xa4>
			   {
				   DCM_voidBrake(&DCM_Object);
    1e6e:	ce 01       	movw	r24, r28
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	0e 94 48 0a 	call	0x1490	; 0x1490 <DCM_voidBrake>
    1e76:	08 c0       	rjmp	.+16     	; 0x1e88 <main+0x19a>
				   while(Local_u8Button3==0)
				   {
					   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
    1e78:	9e 01       	movw	r18, r28
    1e7a:	28 5f       	subi	r18, 0xF8	; 248
    1e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	64 e0       	ldi	r22, 0x04	; 4
    1e82:	a9 01       	movw	r20, r18
    1e84:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_u8GetPinValue>
				   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
			   }
			   if(Local_u8Button3==0)
			   {
				   DCM_voidBrake(&DCM_Object);
				   while(Local_u8Button3==0)
    1e88:	88 85       	ldd	r24, Y+8	; 0x08
    1e8a:	88 23       	and	r24, r24
    1e8c:	a9 f3       	breq	.-22     	; 0x1e78 <main+0x18a>
				   {
					   DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN4,&Local_u8Button3);
				   }
				   CLCD_voidSendCmd(1);
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
    1e94:	7e cf       	rjmp	.-260    	; 0x1d92 <main+0xa4>

00001e96 <__divmodsi4>:
    1e96:	97 fb       	bst	r25, 7
    1e98:	09 2e       	mov	r0, r25
    1e9a:	05 26       	eor	r0, r21
    1e9c:	0e d0       	rcall	.+28     	; 0x1eba <__divmodsi4_neg1>
    1e9e:	57 fd       	sbrc	r21, 7
    1ea0:	04 d0       	rcall	.+8      	; 0x1eaa <__divmodsi4_neg2>
    1ea2:	14 d0       	rcall	.+40     	; 0x1ecc <__udivmodsi4>
    1ea4:	0a d0       	rcall	.+20     	; 0x1eba <__divmodsi4_neg1>
    1ea6:	00 1c       	adc	r0, r0
    1ea8:	38 f4       	brcc	.+14     	; 0x1eb8 <__divmodsi4_exit>

00001eaa <__divmodsi4_neg2>:
    1eaa:	50 95       	com	r21
    1eac:	40 95       	com	r20
    1eae:	30 95       	com	r19
    1eb0:	21 95       	neg	r18
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	4f 4f       	sbci	r20, 0xFF	; 255
    1eb6:	5f 4f       	sbci	r21, 0xFF	; 255

00001eb8 <__divmodsi4_exit>:
    1eb8:	08 95       	ret

00001eba <__divmodsi4_neg1>:
    1eba:	f6 f7       	brtc	.-4      	; 0x1eb8 <__divmodsi4_exit>
    1ebc:	90 95       	com	r25
    1ebe:	80 95       	com	r24
    1ec0:	70 95       	com	r23
    1ec2:	61 95       	neg	r22
    1ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eca:	08 95       	ret

00001ecc <__udivmodsi4>:
    1ecc:	a1 e2       	ldi	r26, 0x21	; 33
    1ece:	1a 2e       	mov	r1, r26
    1ed0:	aa 1b       	sub	r26, r26
    1ed2:	bb 1b       	sub	r27, r27
    1ed4:	fd 01       	movw	r30, r26
    1ed6:	0d c0       	rjmp	.+26     	; 0x1ef2 <__udivmodsi4_ep>

00001ed8 <__udivmodsi4_loop>:
    1ed8:	aa 1f       	adc	r26, r26
    1eda:	bb 1f       	adc	r27, r27
    1edc:	ee 1f       	adc	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	a2 17       	cp	r26, r18
    1ee2:	b3 07       	cpc	r27, r19
    1ee4:	e4 07       	cpc	r30, r20
    1ee6:	f5 07       	cpc	r31, r21
    1ee8:	20 f0       	brcs	.+8      	; 0x1ef2 <__udivmodsi4_ep>
    1eea:	a2 1b       	sub	r26, r18
    1eec:	b3 0b       	sbc	r27, r19
    1eee:	e4 0b       	sbc	r30, r20
    1ef0:	f5 0b       	sbc	r31, r21

00001ef2 <__udivmodsi4_ep>:
    1ef2:	66 1f       	adc	r22, r22
    1ef4:	77 1f       	adc	r23, r23
    1ef6:	88 1f       	adc	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	1a 94       	dec	r1
    1efc:	69 f7       	brne	.-38     	; 0x1ed8 <__udivmodsi4_loop>
    1efe:	60 95       	com	r22
    1f00:	70 95       	com	r23
    1f02:	80 95       	com	r24
    1f04:	90 95       	com	r25
    1f06:	9b 01       	movw	r18, r22
    1f08:	ac 01       	movw	r20, r24
    1f0a:	bd 01       	movw	r22, r26
    1f0c:	cf 01       	movw	r24, r30
    1f0e:	08 95       	ret

00001f10 <__prologue_saves__>:
    1f10:	2f 92       	push	r2
    1f12:	3f 92       	push	r3
    1f14:	4f 92       	push	r4
    1f16:	5f 92       	push	r5
    1f18:	6f 92       	push	r6
    1f1a:	7f 92       	push	r7
    1f1c:	8f 92       	push	r8
    1f1e:	9f 92       	push	r9
    1f20:	af 92       	push	r10
    1f22:	bf 92       	push	r11
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	ca 1b       	sub	r28, r26
    1f3a:	db 0b       	sbc	r29, r27
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	09 94       	ijmp

00001f48 <__epilogue_restores__>:
    1f48:	2a 88       	ldd	r2, Y+18	; 0x12
    1f4a:	39 88       	ldd	r3, Y+17	; 0x11
    1f4c:	48 88       	ldd	r4, Y+16	; 0x10
    1f4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f50:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f52:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f54:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f56:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f58:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f5a:	b9 84       	ldd	r11, Y+9	; 0x09
    1f5c:	c8 84       	ldd	r12, Y+8	; 0x08
    1f5e:	df 80       	ldd	r13, Y+7	; 0x07
    1f60:	ee 80       	ldd	r14, Y+6	; 0x06
    1f62:	fd 80       	ldd	r15, Y+5	; 0x05
    1f64:	0c 81       	ldd	r16, Y+4	; 0x04
    1f66:	1b 81       	ldd	r17, Y+3	; 0x03
    1f68:	aa 81       	ldd	r26, Y+2	; 0x02
    1f6a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f6c:	ce 0f       	add	r28, r30
    1f6e:	d1 1d       	adc	r29, r1
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	ed 01       	movw	r28, r26
    1f7c:	08 95       	ret

00001f7e <_exit>:
    1f7e:	f8 94       	cli

00001f80 <__stop_program>:
    1f80:	ff cf       	rjmp	.-2      	; 0x1f80 <__stop_program>
