
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d00  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000fe4  00000000  00000000  00000d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000059d  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__vector_1>
   8:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 17 06 	call	0xc2e	; 0xc2e <main>
  64:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinDirection>:
 * @param Copy_u8Direction
 * @return
 */

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	28 97       	sbiw	r28, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	8a 83       	std	Y+2, r24	; 0x02
  82:	6b 83       	std	Y+3, r22	; 0x03
  84:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
  86:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin <= DIO_u8PIN7)
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	08 f0       	brcs	.+2      	; 0x90 <DIO_u8SetPinDirection+0x24>
  8e:	f4 c0       	rjmp	.+488    	; 0x278 <DIO_u8SetPinDirection+0x20c>
	{
		if (Copy_u8Direction == DIO_u8PIN_INPUT)
  90:	8c 81       	ldd	r24, Y+4	; 0x04
  92:	88 23       	and	r24, r24
  94:	09 f0       	breq	.+2      	; 0x98 <DIO_u8SetPinDirection+0x2c>
  96:	77 c0       	rjmp	.+238    	; 0x186 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	38 87       	std	Y+8, r19	; 0x08
  a0:	2f 83       	std	Y+7, r18	; 0x07
  a2:	8f 81       	ldd	r24, Y+7	; 0x07
  a4:	98 85       	ldd	r25, Y+8	; 0x08
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	91 05       	cpc	r25, r1
  aa:	59 f1       	breq	.+86     	; 0x102 <DIO_u8SetPinDirection+0x96>
  ac:	2f 81       	ldd	r18, Y+7	; 0x07
  ae:	38 85       	ldd	r19, Y+8	; 0x08
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <DIO_u8SetPinDirection+0x54>
  b6:	8f 81       	ldd	r24, Y+7	; 0x07
  b8:	98 85       	ldd	r25, Y+8	; 0x08
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	69 f0       	breq	.+26     	; 0xd8 <DIO_u8SetPinDirection+0x6c>
  be:	60 c0       	rjmp	.+192    	; 0x180 <DIO_u8SetPinDirection+0x114>
  c0:	2f 81       	ldd	r18, Y+7	; 0x07
  c2:	38 85       	ldd	r19, Y+8	; 0x08
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	31 05       	cpc	r19, r1
  c8:	89 f1       	breq	.+98     	; 0x12c <DIO_u8SetPinDirection+0xc0>
  ca:	8f 81       	ldd	r24, Y+7	; 0x07
  cc:	98 85       	ldd	r25, Y+8	; 0x08
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	09 f4       	brne	.+2      	; 0xd6 <DIO_u8SetPinDirection+0x6a>
  d4:	40 c0       	rjmp	.+128    	; 0x156 <DIO_u8SetPinDirection+0xea>
  d6:	54 c0       	rjmp	.+168    	; 0x180 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_u8SetPinDirection+0x8a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_u8SetPinDirection+0x86>
  fa:	80 95       	com	r24
  fc:	84 23       	and	r24, r20
  fe:	8c 93       	st	X, r24
 100:	bd c0       	rjmp	.+378    	; 0x27c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 102:	a7 e3       	ldi	r26, 0x37	; 55
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e7 e3       	ldi	r30, 0x37	; 55
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_u8SetPinDirection+0xb4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_u8SetPinDirection+0xb0>
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	8c 93       	st	X, r24
 12a:	a8 c0       	rjmp	.+336    	; 0x27c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 12c:	a4 e3       	ldi	r26, 0x34	; 52
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e4 e3       	ldi	r30, 0x34	; 52
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_u8SetPinDirection+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_u8SetPinDirection+0xda>
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	8c 93       	st	X, r24
 154:	93 c0       	rjmp	.+294    	; 0x27c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 156:	a1 e3       	ldi	r26, 0x31	; 49
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e1 e3       	ldi	r30, 0x31	; 49
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_u8SetPinDirection+0x108>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_u8SetPinDirection+0x104>
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	8c 93       	st	X, r24
 17e:	7e c0       	rjmp	.+252    	; 0x27c <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	7b c0       	rjmp	.+246    	; 0x27c <DIO_u8SetPinDirection+0x210>
			}
		}
		else if (Copy_u8Direction == DIO_u8PIN_OUTPUT)
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	09 f0       	breq	.+2      	; 0x18e <DIO_u8SetPinDirection+0x122>
 18c:	72 c0       	rjmp	.+228    	; 0x272 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	3e 83       	std	Y+6, r19	; 0x06
 196:	2d 83       	std	Y+5, r18	; 0x05
 198:	8d 81       	ldd	r24, Y+5	; 0x05
 19a:	9e 81       	ldd	r25, Y+6	; 0x06
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	49 f1       	breq	.+82     	; 0x1f4 <DIO_u8SetPinDirection+0x188>
 1a2:	2d 81       	ldd	r18, Y+5	; 0x05
 1a4:	3e 81       	ldd	r19, Y+6	; 0x06
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	2c f4       	brge	.+10     	; 0x1b6 <DIO_u8SetPinDirection+0x14a>
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	9e 81       	ldd	r25, Y+6	; 0x06
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	61 f0       	breq	.+24     	; 0x1cc <DIO_u8SetPinDirection+0x160>
 1b4:	5b c0       	rjmp	.+182    	; 0x26c <DIO_u8SetPinDirection+0x200>
 1b6:	2d 81       	ldd	r18, Y+5	; 0x05
 1b8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	71 f1       	breq	.+92     	; 0x21c <DIO_u8SetPinDirection+0x1b0>
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	91 05       	cpc	r25, r1
 1c8:	e9 f1       	breq	.+122    	; 0x244 <DIO_u8SetPinDirection+0x1d8>
 1ca:	50 c0       	rjmp	.+160    	; 0x26c <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 1cc:	aa e3       	ldi	r26, 0x3A	; 58
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	ea e3       	ldi	r30, 0x3A	; 58
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_u8SetPinDirection+0x17e>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_u8SetPinDirection+0x17a>
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	44 c0       	rjmp	.+136    	; 0x27c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 1f4:	a7 e3       	ldi	r26, 0x37	; 55
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e7 e3       	ldi	r30, 0x37	; 55
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_u8SetPinDirection+0x1a6>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_u8SetPinDirection+0x1a2>
 216:	84 2b       	or	r24, r20
 218:	8c 93       	st	X, r24
 21a:	30 c0       	rjmp	.+96     	; 0x27c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 21c:	a4 e3       	ldi	r26, 0x34	; 52
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e4 e3       	ldi	r30, 0x34	; 52
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_u8SetPinDirection+0x1ce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_u8SetPinDirection+0x1ca>
 23e:	84 2b       	or	r24, r20
 240:	8c 93       	st	X, r24
 242:	1c c0       	rjmp	.+56     	; 0x27c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 244:	a1 e3       	ldi	r26, 0x31	; 49
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e1 e3       	ldi	r30, 0x31	; 49
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_u8SetPinDirection+0x1f6>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_u8SetPinDirection+0x1f2>
 266:	84 2b       	or	r24, r20
 268:	8c 93       	st	X, r24
 26a:	08 c0       	rjmp	.+16     	; 0x27c <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	05 c0       	rjmp	.+10     	; 0x27c <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_u8SetPinDirection+0x210>
	}


	else
	{
		Local_u8ErrorState = NOK;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 27c:	89 81       	ldd	r24, Y+1	; 0x01
}
 27e:	28 96       	adiw	r28, 0x08	; 8
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	cf 91       	pop	r28
 28c:	df 91       	pop	r29
 28e:	08 95       	ret

00000290 <DIO_u8SetPinValue>:



uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
 290:	df 93       	push	r29
 292:	cf 93       	push	r28
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	28 97       	sbiw	r28, 0x08	; 8
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	8a 83       	std	Y+2, r24	; 0x02
 2a6:	6b 83       	std	Y+3, r22	; 0x03
 2a8:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
 2aa:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin <= DIO_u8PIN7)
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	08 f0       	brcs	.+2      	; 0x2b4 <DIO_u8SetPinValue+0x24>
 2b2:	f4 c0       	rjmp	.+488    	; 0x49c <DIO_u8SetPinValue+0x20c>
	{
		if (Copy_u8Value == DIO_u8PIN_LOW)
 2b4:	8c 81       	ldd	r24, Y+4	; 0x04
 2b6:	88 23       	and	r24, r24
 2b8:	09 f0       	breq	.+2      	; 0x2bc <DIO_u8SetPinValue+0x2c>
 2ba:	77 c0       	rjmp	.+238    	; 0x3aa <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	28 2f       	mov	r18, r24
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	38 87       	std	Y+8, r19	; 0x08
 2c4:	2f 83       	std	Y+7, r18	; 0x07
 2c6:	8f 81       	ldd	r24, Y+7	; 0x07
 2c8:	98 85       	ldd	r25, Y+8	; 0x08
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	91 05       	cpc	r25, r1
 2ce:	59 f1       	breq	.+86     	; 0x326 <DIO_u8SetPinValue+0x96>
 2d0:	2f 81       	ldd	r18, Y+7	; 0x07
 2d2:	38 85       	ldd	r19, Y+8	; 0x08
 2d4:	22 30       	cpi	r18, 0x02	; 2
 2d6:	31 05       	cpc	r19, r1
 2d8:	2c f4       	brge	.+10     	; 0x2e4 <DIO_u8SetPinValue+0x54>
 2da:	8f 81       	ldd	r24, Y+7	; 0x07
 2dc:	98 85       	ldd	r25, Y+8	; 0x08
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	69 f0       	breq	.+26     	; 0x2fc <DIO_u8SetPinValue+0x6c>
 2e2:	60 c0       	rjmp	.+192    	; 0x3a4 <DIO_u8SetPinValue+0x114>
 2e4:	2f 81       	ldd	r18, Y+7	; 0x07
 2e6:	38 85       	ldd	r19, Y+8	; 0x08
 2e8:	22 30       	cpi	r18, 0x02	; 2
 2ea:	31 05       	cpc	r19, r1
 2ec:	89 f1       	breq	.+98     	; 0x350 <DIO_u8SetPinValue+0xc0>
 2ee:	8f 81       	ldd	r24, Y+7	; 0x07
 2f0:	98 85       	ldd	r25, Y+8	; 0x08
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	91 05       	cpc	r25, r1
 2f6:	09 f4       	brne	.+2      	; 0x2fa <DIO_u8SetPinValue+0x6a>
 2f8:	40 c0       	rjmp	.+128    	; 0x37a <DIO_u8SetPinValue+0xea>
 2fa:	54 c0       	rjmp	.+168    	; 0x3a4 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 2fc:	ab e3       	ldi	r26, 0x3B	; 59
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	eb e3       	ldi	r30, 0x3B	; 59
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	48 2f       	mov	r20, r24
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 2e       	mov	r0, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_u8SetPinValue+0x8a>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_u8SetPinValue+0x86>
 31e:	80 95       	com	r24
 320:	84 23       	and	r24, r20
 322:	8c 93       	st	X, r24
 324:	bd c0       	rjmp	.+378    	; 0x4a0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 326:	a8 e3       	ldi	r26, 0x38	; 56
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e8 e3       	ldi	r30, 0x38	; 56
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	48 2f       	mov	r20, r24
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	28 2f       	mov	r18, r24
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 2e       	mov	r0, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8SetPinValue+0xb4>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8SetPinValue+0xb0>
 348:	80 95       	com	r24
 34a:	84 23       	and	r24, r20
 34c:	8c 93       	st	X, r24
 34e:	a8 c0       	rjmp	.+336    	; 0x4a0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 350:	a5 e3       	ldi	r26, 0x35	; 53
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e5 e3       	ldi	r30, 0x35	; 53
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	8b 81       	ldd	r24, Y+3	; 0x03
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_u8SetPinValue+0xde>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_u8SetPinValue+0xda>
 372:	80 95       	com	r24
 374:	84 23       	and	r24, r20
 376:	8c 93       	st	X, r24
 378:	93 c0       	rjmp	.+294    	; 0x4a0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 37a:	a2 e3       	ldi	r26, 0x32	; 50
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	e2 e3       	ldi	r30, 0x32	; 50
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	48 2f       	mov	r20, r24
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	28 2f       	mov	r18, r24
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 2e       	mov	r0, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_u8SetPinValue+0x108>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_u8SetPinValue+0x104>
 39c:	80 95       	com	r24
 39e:	84 23       	and	r24, r20
 3a0:	8c 93       	st	X, r24
 3a2:	7e c0       	rjmp	.+252    	; 0x4a0 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK; break;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	89 83       	std	Y+1, r24	; 0x01
 3a8:	7b c0       	rjmp	.+246    	; 0x4a0 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value == DIO_u8PIN_HIGH)
 3aa:	8c 81       	ldd	r24, Y+4	; 0x04
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <DIO_u8SetPinValue+0x122>
 3b0:	72 c0       	rjmp	.+228    	; 0x496 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	3e 83       	std	Y+6, r19	; 0x06
 3ba:	2d 83       	std	Y+5, r18	; 0x05
 3bc:	8d 81       	ldd	r24, Y+5	; 0x05
 3be:	9e 81       	ldd	r25, Y+6	; 0x06
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	91 05       	cpc	r25, r1
 3c4:	49 f1       	breq	.+82     	; 0x418 <DIO_u8SetPinValue+0x188>
 3c6:	2d 81       	ldd	r18, Y+5	; 0x05
 3c8:	3e 81       	ldd	r19, Y+6	; 0x06
 3ca:	22 30       	cpi	r18, 0x02	; 2
 3cc:	31 05       	cpc	r19, r1
 3ce:	2c f4       	brge	.+10     	; 0x3da <DIO_u8SetPinValue+0x14a>
 3d0:	8d 81       	ldd	r24, Y+5	; 0x05
 3d2:	9e 81       	ldd	r25, Y+6	; 0x06
 3d4:	00 97       	sbiw	r24, 0x00	; 0
 3d6:	61 f0       	breq	.+24     	; 0x3f0 <DIO_u8SetPinValue+0x160>
 3d8:	5b c0       	rjmp	.+182    	; 0x490 <DIO_u8SetPinValue+0x200>
 3da:	2d 81       	ldd	r18, Y+5	; 0x05
 3dc:	3e 81       	ldd	r19, Y+6	; 0x06
 3de:	22 30       	cpi	r18, 0x02	; 2
 3e0:	31 05       	cpc	r19, r1
 3e2:	71 f1       	breq	.+92     	; 0x440 <DIO_u8SetPinValue+0x1b0>
 3e4:	8d 81       	ldd	r24, Y+5	; 0x05
 3e6:	9e 81       	ldd	r25, Y+6	; 0x06
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	91 05       	cpc	r25, r1
 3ec:	e9 f1       	breq	.+122    	; 0x468 <DIO_u8SetPinValue+0x1d8>
 3ee:	50 c0       	rjmp	.+160    	; 0x490 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 3f0:	ab e3       	ldi	r26, 0x3B	; 59
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	eb e3       	ldi	r30, 0x3B	; 59
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	28 2f       	mov	r18, r24
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 2e       	mov	r0, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_u8SetPinValue+0x17e>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_u8SetPinValue+0x17a>
 412:	84 2b       	or	r24, r20
 414:	8c 93       	st	X, r24
 416:	44 c0       	rjmp	.+136    	; 0x4a0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 418:	a8 e3       	ldi	r26, 0x38	; 56
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	e8 e3       	ldi	r30, 0x38	; 56
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	48 2f       	mov	r20, r24
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	28 2f       	mov	r18, r24
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 2e       	mov	r0, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_u8SetPinValue+0x1a6>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_u8SetPinValue+0x1a2>
 43a:	84 2b       	or	r24, r20
 43c:	8c 93       	st	X, r24
 43e:	30 c0       	rjmp	.+96     	; 0x4a0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 440:	a5 e3       	ldi	r26, 0x35	; 53
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	e5 e3       	ldi	r30, 0x35	; 53
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	48 2f       	mov	r20, r24
 44c:	8b 81       	ldd	r24, Y+3	; 0x03
 44e:	28 2f       	mov	r18, r24
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 2e       	mov	r0, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_u8SetPinValue+0x1ce>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	0a 94       	dec	r0
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_u8SetPinValue+0x1ca>
 462:	84 2b       	or	r24, r20
 464:	8c 93       	st	X, r24
 466:	1c c0       	rjmp	.+56     	; 0x4a0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 468:	a2 e3       	ldi	r26, 0x32	; 50
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	e2 e3       	ldi	r30, 0x32	; 50
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	48 2f       	mov	r20, r24
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 2e       	mov	r0, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_u8SetPinValue+0x1f6>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_u8SetPinValue+0x1f2>
 48a:	84 2b       	or	r24, r20
 48c:	8c 93       	st	X, r24
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK; break;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	89 83       	std	Y+1, r24	; 0x01
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	89 83       	std	Y+1, r24	; 0x01
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_u8SetPinValue+0x210>
	}


	else
	{
		Local_u8ErrorState = NOK;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
}
 4a2:	28 96       	adiw	r28, 0x08	; 8
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	cf 91       	pop	r28
 4b0:	df 91       	pop	r29
 4b2:	08 95       	ret

000004b4 <DIO_u8GetPinValue>:


uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)
{
 4b4:	df 93       	push	r29
 4b6:	cf 93       	push	r28
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	27 97       	sbiw	r28, 0x07	; 7
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	8a 83       	std	Y+2, r24	; 0x02
 4ca:	6b 83       	std	Y+3, r22	; 0x03
 4cc:	5d 83       	std	Y+5, r21	; 0x05
 4ce:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
 4d0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value != NULL)
 4d2:	8c 81       	ldd	r24, Y+4	; 0x04
 4d4:	9d 81       	ldd	r25, Y+5	; 0x05
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	09 f4       	brne	.+2      	; 0x4dc <DIO_u8GetPinValue+0x28>
 4da:	7b c0       	rjmp	.+246    	; 0x5d2 <DIO_u8GetPinValue+0x11e>
	{

		if (Copy_u8Pin <= DIO_u8PIN7)
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	88 30       	cpi	r24, 0x08	; 8
 4e0:	08 f0       	brcs	.+2      	; 0x4e4 <DIO_u8GetPinValue+0x30>
 4e2:	74 c0       	rjmp	.+232    	; 0x5cc <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	28 2f       	mov	r18, r24
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	3f 83       	std	Y+7, r19	; 0x07
 4ec:	2e 83       	std	Y+6, r18	; 0x06
 4ee:	4e 81       	ldd	r20, Y+6	; 0x06
 4f0:	5f 81       	ldd	r21, Y+7	; 0x07
 4f2:	41 30       	cpi	r20, 0x01	; 1
 4f4:	51 05       	cpc	r21, r1
 4f6:	59 f1       	breq	.+86     	; 0x54e <DIO_u8GetPinValue+0x9a>
 4f8:	8e 81       	ldd	r24, Y+6	; 0x06
 4fa:	9f 81       	ldd	r25, Y+7	; 0x07
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	91 05       	cpc	r25, r1
 500:	34 f4       	brge	.+12     	; 0x50e <DIO_u8GetPinValue+0x5a>
 502:	2e 81       	ldd	r18, Y+6	; 0x06
 504:	3f 81       	ldd	r19, Y+7	; 0x07
 506:	21 15       	cp	r18, r1
 508:	31 05       	cpc	r19, r1
 50a:	69 f0       	breq	.+26     	; 0x526 <DIO_u8GetPinValue+0x72>
 50c:	5c c0       	rjmp	.+184    	; 0x5c6 <DIO_u8GetPinValue+0x112>
 50e:	4e 81       	ldd	r20, Y+6	; 0x06
 510:	5f 81       	ldd	r21, Y+7	; 0x07
 512:	42 30       	cpi	r20, 0x02	; 2
 514:	51 05       	cpc	r21, r1
 516:	79 f1       	breq	.+94     	; 0x576 <DIO_u8GetPinValue+0xc2>
 518:	8e 81       	ldd	r24, Y+6	; 0x06
 51a:	9f 81       	ldd	r25, Y+7	; 0x07
 51c:	83 30       	cpi	r24, 0x03	; 3
 51e:	91 05       	cpc	r25, r1
 520:	09 f4       	brne	.+2      	; 0x524 <DIO_u8GetPinValue+0x70>
 522:	3d c0       	rjmp	.+122    	; 0x59e <DIO_u8GetPinValue+0xea>
 524:	50 c0       	rjmp	.+160    	; 0x5c6 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
 526:	e9 e3       	ldi	r30, 0x39	; 57
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	88 2f       	mov	r24, r24
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	a9 01       	movw	r20, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_u8GetPinValue+0x8a>
 53a:	55 95       	asr	r21
 53c:	47 95       	ror	r20
 53e:	8a 95       	dec	r24
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_u8GetPinValue+0x86>
 542:	ca 01       	movw	r24, r20
 544:	81 70       	andi	r24, 0x01	; 1
 546:	ec 81       	ldd	r30, Y+4	; 0x04
 548:	fd 81       	ldd	r31, Y+5	; 0x05
 54a:	80 83       	st	Z, r24
 54c:	44 c0       	rjmp	.+136    	; 0x5d6 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTB: *Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
 54e:	e6 e3       	ldi	r30, 0x36	; 54
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	28 2f       	mov	r18, r24
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	88 2f       	mov	r24, r24
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	a9 01       	movw	r20, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_u8GetPinValue+0xb2>
 562:	55 95       	asr	r21
 564:	47 95       	ror	r20
 566:	8a 95       	dec	r24
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_u8GetPinValue+0xae>
 56a:	ca 01       	movw	r24, r20
 56c:	81 70       	andi	r24, 0x01	; 1
 56e:	ec 81       	ldd	r30, Y+4	; 0x04
 570:	fd 81       	ldd	r31, Y+5	; 0x05
 572:	80 83       	st	Z, r24
 574:	30 c0       	rjmp	.+96     	; 0x5d6 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTC: *Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
 576:	e3 e3       	ldi	r30, 0x33	; 51
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	8b 81       	ldd	r24, Y+3	; 0x03
 582:	88 2f       	mov	r24, r24
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	a9 01       	movw	r20, r18
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_u8GetPinValue+0xda>
 58a:	55 95       	asr	r21
 58c:	47 95       	ror	r20
 58e:	8a 95       	dec	r24
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_u8GetPinValue+0xd6>
 592:	ca 01       	movw	r24, r20
 594:	81 70       	andi	r24, 0x01	; 1
 596:	ec 81       	ldd	r30, Y+4	; 0x04
 598:	fd 81       	ldd	r31, Y+5	; 0x05
 59a:	80 83       	st	Z, r24
 59c:	1c c0       	rjmp	.+56     	; 0x5d6 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTD: *Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
 59e:	e0 e3       	ldi	r30, 0x30	; 48
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	88 2f       	mov	r24, r24
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	a9 01       	movw	r20, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_u8GetPinValue+0x102>
 5b2:	55 95       	asr	r21
 5b4:	47 95       	ror	r20
 5b6:	8a 95       	dec	r24
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_u8GetPinValue+0xfe>
 5ba:	ca 01       	movw	r24, r20
 5bc:	81 70       	andi	r24, 0x01	; 1
 5be:	ec 81       	ldd	r30, Y+4	; 0x04
 5c0:	fd 81       	ldd	r31, Y+5	; 0x05
 5c2:	80 83       	st	Z, r24
 5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <DIO_u8GetPinValue+0x122>
			default: Local_u8ErrorState = NOK; break;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	89 83       	std	Y+1, r24	; 0x01
 5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	89 83       	std	Y+1, r24	; 0x01
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_u8GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR ;
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 5d8:	27 96       	adiw	r28, 0x07	; 7
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	f8 94       	cli
 5de:	de bf       	out	0x3e, r29	; 62
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	cd bf       	out	0x3d, r28	; 61
 5e4:	cf 91       	pop	r28
 5e6:	df 91       	pop	r29
 5e8:	08 95       	ret

000005ea <DIO_u8SetPortDirection>:


uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
 5ea:	df 93       	push	r29
 5ec:	cf 93       	push	r28
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <DIO_u8SetPortDirection+0x6>
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <DIO_u8SetPortDirection+0x8>
 5f2:	0f 92       	push	r0
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	8a 83       	std	Y+2, r24	; 0x02
 5fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 5fc:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 5fe:	8a 81       	ldd	r24, Y+2	; 0x02
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	3d 83       	std	Y+5, r19	; 0x05
 606:	2c 83       	std	Y+4, r18	; 0x04
 608:	8c 81       	ldd	r24, Y+4	; 0x04
 60a:	9d 81       	ldd	r25, Y+5	; 0x05
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	91 05       	cpc	r25, r1
 610:	d1 f0       	breq	.+52     	; 0x646 <DIO_u8SetPortDirection+0x5c>
 612:	2c 81       	ldd	r18, Y+4	; 0x04
 614:	3d 81       	ldd	r19, Y+5	; 0x05
 616:	22 30       	cpi	r18, 0x02	; 2
 618:	31 05       	cpc	r19, r1
 61a:	2c f4       	brge	.+10     	; 0x626 <DIO_u8SetPortDirection+0x3c>
 61c:	8c 81       	ldd	r24, Y+4	; 0x04
 61e:	9d 81       	ldd	r25, Y+5	; 0x05
 620:	00 97       	sbiw	r24, 0x00	; 0
 622:	61 f0       	breq	.+24     	; 0x63c <DIO_u8SetPortDirection+0x52>
 624:	1f c0       	rjmp	.+62     	; 0x664 <DIO_u8SetPortDirection+0x7a>
 626:	2c 81       	ldd	r18, Y+4	; 0x04
 628:	3d 81       	ldd	r19, Y+5	; 0x05
 62a:	22 30       	cpi	r18, 0x02	; 2
 62c:	31 05       	cpc	r19, r1
 62e:	81 f0       	breq	.+32     	; 0x650 <DIO_u8SetPortDirection+0x66>
 630:	8c 81       	ldd	r24, Y+4	; 0x04
 632:	9d 81       	ldd	r25, Y+5	; 0x05
 634:	83 30       	cpi	r24, 0x03	; 3
 636:	91 05       	cpc	r25, r1
 638:	81 f0       	breq	.+32     	; 0x65a <DIO_u8SetPortDirection+0x70>
 63a:	14 c0       	rjmp	.+40     	; 0x664 <DIO_u8SetPortDirection+0x7a>
				{
				case DIO_u8PORTA: DDRA = Copy_u8Direction  ; break;
 63c:	ea e3       	ldi	r30, 0x3A	; 58
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	80 83       	st	Z, r24
 644:	11 c0       	rjmp	.+34     	; 0x668 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTB: DDRB = Copy_u8Direction  ; break;
 646:	e7 e3       	ldi	r30, 0x37	; 55
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	8b 81       	ldd	r24, Y+3	; 0x03
 64c:	80 83       	st	Z, r24
 64e:	0c c0       	rjmp	.+24     	; 0x668 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTC: DDRC = Copy_u8Direction  ; break;
 650:	e4 e3       	ldi	r30, 0x34	; 52
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	8b 81       	ldd	r24, Y+3	; 0x03
 656:	80 83       	st	Z, r24
 658:	07 c0       	rjmp	.+14     	; 0x668 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTD: DDRD = Copy_u8Direction  ; break;
 65a:	e1 e3       	ldi	r30, 0x31	; 49
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	8b 81       	ldd	r24, Y+3	; 0x03
 660:	80 83       	st	Z, r24
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_u8SetPortDirection+0x7e>
				default: Local_u8ErrorState = NOK; break;
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	89 83       	std	Y+1, r24	; 0x01
				}
	return Local_u8ErrorState;
 668:	89 81       	ldd	r24, Y+1	; 0x01
}
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	cf 91       	pop	r28
 676:	df 91       	pop	r29
 678:	08 95       	ret

0000067a <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Value)
{
 67a:	df 93       	push	r29
 67c:	cf 93       	push	r28
 67e:	00 d0       	rcall	.+0      	; 0x680 <DIO_u8SetPortValue+0x6>
 680:	00 d0       	rcall	.+0      	; 0x682 <DIO_u8SetPortValue+0x8>
 682:	0f 92       	push	r0
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	8a 83       	std	Y+2, r24	; 0x02
 68a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 68c:	19 82       	std	Y+1, r1	; 0x01

		switch(Copy_u8Port)
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	28 2f       	mov	r18, r24
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	3d 83       	std	Y+5, r19	; 0x05
 696:	2c 83       	std	Y+4, r18	; 0x04
 698:	8c 81       	ldd	r24, Y+4	; 0x04
 69a:	9d 81       	ldd	r25, Y+5	; 0x05
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	91 05       	cpc	r25, r1
 6a0:	d1 f0       	breq	.+52     	; 0x6d6 <DIO_u8SetPortValue+0x5c>
 6a2:	2c 81       	ldd	r18, Y+4	; 0x04
 6a4:	3d 81       	ldd	r19, Y+5	; 0x05
 6a6:	22 30       	cpi	r18, 0x02	; 2
 6a8:	31 05       	cpc	r19, r1
 6aa:	2c f4       	brge	.+10     	; 0x6b6 <DIO_u8SetPortValue+0x3c>
 6ac:	8c 81       	ldd	r24, Y+4	; 0x04
 6ae:	9d 81       	ldd	r25, Y+5	; 0x05
 6b0:	00 97       	sbiw	r24, 0x00	; 0
 6b2:	61 f0       	breq	.+24     	; 0x6cc <DIO_u8SetPortValue+0x52>
 6b4:	1f c0       	rjmp	.+62     	; 0x6f4 <DIO_u8SetPortValue+0x7a>
 6b6:	2c 81       	ldd	r18, Y+4	; 0x04
 6b8:	3d 81       	ldd	r19, Y+5	; 0x05
 6ba:	22 30       	cpi	r18, 0x02	; 2
 6bc:	31 05       	cpc	r19, r1
 6be:	81 f0       	breq	.+32     	; 0x6e0 <DIO_u8SetPortValue+0x66>
 6c0:	8c 81       	ldd	r24, Y+4	; 0x04
 6c2:	9d 81       	ldd	r25, Y+5	; 0x05
 6c4:	83 30       	cpi	r24, 0x03	; 3
 6c6:	91 05       	cpc	r25, r1
 6c8:	81 f0       	breq	.+32     	; 0x6ea <DIO_u8SetPortValue+0x70>
 6ca:	14 c0       	rjmp	.+40     	; 0x6f4 <DIO_u8SetPortValue+0x7a>
					{
					case DIO_u8PORTA: PORTA = Copy_u8Value  ; break;
 6cc:	eb e3       	ldi	r30, 0x3B	; 59
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	8b 81       	ldd	r24, Y+3	; 0x03
 6d2:	80 83       	st	Z, r24
 6d4:	11 c0       	rjmp	.+34     	; 0x6f8 <DIO_u8SetPortValue+0x7e>
					case DIO_u8PORTB: PORTB = Copy_u8Value  ; break;
 6d6:	e8 e3       	ldi	r30, 0x38	; 56
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	80 83       	st	Z, r24
 6de:	0c c0       	rjmp	.+24     	; 0x6f8 <DIO_u8SetPortValue+0x7e>
					case DIO_u8PORTC: PORTC = Copy_u8Value  ; break;
 6e0:	e5 e3       	ldi	r30, 0x35	; 53
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	80 83       	st	Z, r24
 6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <DIO_u8SetPortValue+0x7e>
					case DIO_u8PORTD: PORTD = Copy_u8Value  ; break;
 6ea:	e2 e3       	ldi	r30, 0x32	; 50
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	80 83       	st	Z, r24
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_u8SetPortValue+0x7e>
					default: Local_u8ErrorState = NOK; break;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	89 83       	std	Y+1, r24	; 0x01
					}
		return Local_u8ErrorState;
 6f8:	89 81       	ldd	r24, Y+1	; 0x01

}
 6fa:	0f 90       	pop	r0
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	cf 91       	pop	r28
 706:	df 91       	pop	r29
 708:	08 95       	ret

0000070a <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
 70a:	df 93       	push	r29
 70c:	cf 93       	push	r28
 70e:	00 d0       	rcall	.+0      	; 0x710 <DIO_u8TogglePinValue+0x6>
 710:	00 d0       	rcall	.+0      	; 0x712 <DIO_u8TogglePinValue+0x8>
 712:	0f 92       	push	r0
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	8a 83       	std	Y+2, r24	; 0x02
 71a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 71c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin <= DIO_u8PIN7)
 71e:	8b 81       	ldd	r24, Y+3	; 0x03
 720:	88 30       	cpi	r24, 0x08	; 8
 722:	08 f0       	brcs	.+2      	; 0x726 <DIO_u8TogglePinValue+0x1c>
 724:	72 c0       	rjmp	.+228    	; 0x80a <DIO_u8TogglePinValue+0x100>
	{

	switch(Copy_u8Port)
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	28 2f       	mov	r18, r24
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	3d 83       	std	Y+5, r19	; 0x05
 72e:	2c 83       	std	Y+4, r18	; 0x04
 730:	8c 81       	ldd	r24, Y+4	; 0x04
 732:	9d 81       	ldd	r25, Y+5	; 0x05
 734:	81 30       	cpi	r24, 0x01	; 1
 736:	91 05       	cpc	r25, r1
 738:	49 f1       	breq	.+82     	; 0x78c <DIO_u8TogglePinValue+0x82>
 73a:	2c 81       	ldd	r18, Y+4	; 0x04
 73c:	3d 81       	ldd	r19, Y+5	; 0x05
 73e:	22 30       	cpi	r18, 0x02	; 2
 740:	31 05       	cpc	r19, r1
 742:	2c f4       	brge	.+10     	; 0x74e <DIO_u8TogglePinValue+0x44>
 744:	8c 81       	ldd	r24, Y+4	; 0x04
 746:	9d 81       	ldd	r25, Y+5	; 0x05
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	61 f0       	breq	.+24     	; 0x764 <DIO_u8TogglePinValue+0x5a>
 74c:	5b c0       	rjmp	.+182    	; 0x804 <DIO_u8TogglePinValue+0xfa>
 74e:	2c 81       	ldd	r18, Y+4	; 0x04
 750:	3d 81       	ldd	r19, Y+5	; 0x05
 752:	22 30       	cpi	r18, 0x02	; 2
 754:	31 05       	cpc	r19, r1
 756:	71 f1       	breq	.+92     	; 0x7b4 <DIO_u8TogglePinValue+0xaa>
 758:	8c 81       	ldd	r24, Y+4	; 0x04
 75a:	9d 81       	ldd	r25, Y+5	; 0x05
 75c:	83 30       	cpi	r24, 0x03	; 3
 75e:	91 05       	cpc	r25, r1
 760:	e9 f1       	breq	.+122    	; 0x7dc <DIO_u8TogglePinValue+0xd2>
 762:	50 c0       	rjmp	.+160    	; 0x804 <DIO_u8TogglePinValue+0xfa>
				{
				case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin); break;
 764:	ab e3       	ldi	r26, 0x3B	; 59
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	eb e3       	ldi	r30, 0x3B	; 59
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	48 2f       	mov	r20, r24
 770:	8b 81       	ldd	r24, Y+3	; 0x03
 772:	28 2f       	mov	r18, r24
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 2e       	mov	r0, r18
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_u8TogglePinValue+0x78>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	0a 94       	dec	r0
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_u8TogglePinValue+0x74>
 786:	84 27       	eor	r24, r20
 788:	8c 93       	st	X, r24
 78a:	41 c0       	rjmp	.+130    	; 0x80e <DIO_u8TogglePinValue+0x104>
				case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin); break;
 78c:	a8 e3       	ldi	r26, 0x38	; 56
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	e8 e3       	ldi	r30, 0x38	; 56
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	48 2f       	mov	r20, r24
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	28 2f       	mov	r18, r24
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 2e       	mov	r0, r18
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_u8TogglePinValue+0xa0>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	0a 94       	dec	r0
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_u8TogglePinValue+0x9c>
 7ae:	84 27       	eor	r24, r20
 7b0:	8c 93       	st	X, r24
 7b2:	2d c0       	rjmp	.+90     	; 0x80e <DIO_u8TogglePinValue+0x104>
				case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin); break;
 7b4:	a5 e3       	ldi	r26, 0x35	; 53
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	e5 e3       	ldi	r30, 0x35	; 53
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	48 2f       	mov	r20, r24
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	28 2f       	mov	r18, r24
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	02 2e       	mov	r0, r18
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_u8TogglePinValue+0xc8>
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	0a 94       	dec	r0
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_u8TogglePinValue+0xc4>
 7d6:	84 27       	eor	r24, r20
 7d8:	8c 93       	st	X, r24
 7da:	19 c0       	rjmp	.+50     	; 0x80e <DIO_u8TogglePinValue+0x104>
				case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin); break;
 7dc:	a2 e3       	ldi	r26, 0x32	; 50
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	e2 e3       	ldi	r30, 0x32	; 50
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	48 2f       	mov	r20, r24
 7e8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ea:	28 2f       	mov	r18, r24
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 2e       	mov	r0, r18
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_u8TogglePinValue+0xf0>
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	0a 94       	dec	r0
 7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_u8TogglePinValue+0xec>
 7fe:	84 27       	eor	r24, r20
 800:	8c 93       	st	X, r24
 802:	05 c0       	rjmp	.+10     	; 0x80e <DIO_u8TogglePinValue+0x104>
				default: Local_u8ErrorState = NOK; break;
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	89 83       	std	Y+1, r24	; 0x01
 808:	02 c0       	rjmp	.+4      	; 0x80e <DIO_u8TogglePinValue+0x104>
				}
	}
	else
	{
		Local_u8ErrorState = NOK;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	89 83       	std	Y+1, r24	; 0x01
	}
			return Local_u8ErrorState;
 80e:	89 81       	ldd	r24, Y+1	; 0x01
}
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
 818:	0f 90       	pop	r0
 81a:	cf 91       	pop	r28
 81c:	df 91       	pop	r29
 81e:	08 95       	ret

00000820 <EXTI_voidInitInt0>:
#include "EXTI_private.h"
#include "EXTI_reg.h"


void EXTI_voidInitInt0(void)
{
 820:	df 93       	push	r29
 822:	cf 93       	push	r28
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE_CTRL == EXTI_u8ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE_CTRL == EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
 828:	a5 e5       	ldi	r26, 0x55	; 85
 82a:	b0 e0       	ldi	r27, 0x00	; 0
 82c:	e5 e5       	ldi	r30, 0x55	; 85
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	8e 7f       	andi	r24, 0xFE	; 254
 834:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
 836:	a5 e5       	ldi	r26, 0x55	; 85
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	e5 e5       	ldi	r30, 0x55	; 85
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	82 60       	ori	r24, 0x02	; 2
 842:	8c 93       	st	X, r24
	/*implement INT0 initial state configuration*/

#if INT0_INITIAL_STATE   == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#elif INT0_INITIAL_STATE   == ENABLED
	SET_BIT(GICR,GICR_INT0);
 844:	ab e5       	ldi	r26, 0x5B	; 91
 846:	b0 e0       	ldi	r27, 0x00	; 0
 848:	eb e5       	ldi	r30, 0x5B	; 91
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	80 64       	ori	r24, 0x40	; 64
 850:	8c 93       	st	X, r24
#else
#error wrong INT0_INITIAL_STATE configuration option
#endif
}
 852:	cf 91       	pop	r28
 854:	df 91       	pop	r29
 856:	08 95       	ret

00000858 <EXTI_voidInitInt1>:

void EXTI_voidInitInt1(void)
{
 858:	df 93       	push	r29
 85a:	cf 93       	push	r28
 85c:	cd b7       	in	r28, 0x3d	; 61
 85e:	de b7       	in	r29, 0x3e	; 62
#elif INT1_SENSE_CTRL == EXTI_u8ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif INT1_SENSE_CTRL == EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
 860:	a5 e5       	ldi	r26, 0x55	; 85
 862:	b0 e0       	ldi	r27, 0x00	; 0
 864:	e5 e5       	ldi	r30, 0x55	; 85
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	8b 7f       	andi	r24, 0xFB	; 251
 86c:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
 86e:	a5 e5       	ldi	r26, 0x55	; 85
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	e5 e5       	ldi	r30, 0x55	; 85
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	88 60       	ori	r24, 0x08	; 8
 87a:	8c 93       	st	X, r24
	/*implement INT0 initial state configuration*/

#if INT1_INITIAL_STATE   == DISABLED
	CLR_BIT(GICR,GICR_INT1);
#elif INT1_INITIAL_STATE   == ENABLED
	SET_BIT(GICR,GICR_INT1);
 87c:	ab e5       	ldi	r26, 0x5B	; 91
 87e:	b0 e0       	ldi	r27, 0x00	; 0
 880:	eb e5       	ldi	r30, 0x5B	; 91
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	80 68       	ori	r24, 0x80	; 128
 888:	8c 93       	st	X, r24
#else
#error wrong INT1_INITIAL_STATE configuration option
#endif

}
 88a:	cf 91       	pop	r28
 88c:	df 91       	pop	r29
 88e:	08 95       	ret

00000890 <EXTI_voidInitInt2>:



void EXTI_voidInitInt2(void)
{
 890:	df 93       	push	r29
 892:	cf 93       	push	r28
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
	/*implement INT2 sense control configurations */

#if INT2_SENSE_CTRL == EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
 898:	a4 e5       	ldi	r26, 0x54	; 84
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	e4 e5       	ldi	r30, 0x54	; 84
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	8f 7b       	andi	r24, 0xBF	; 191
 8a4:	8c 93       	st	X, r24

#if INT2_INITIAL_STATE   == DISABLED
	CLR_BIT(GICR,GICR_INT2);

#elif INT2_INITIAL_STATE   == ENABLED
	SET_BIT(GICR,GICR_INT2);
 8a6:	ab e5       	ldi	r26, 0x5B	; 91
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	eb e5       	ldi	r30, 0x5B	; 91
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	80 81       	ld	r24, Z
 8b0:	80 62       	ori	r24, 0x20	; 32
 8b2:	8c 93       	st	X, r24

#else
#error wrong INT2_INITIAL_STATE configuration option
#endif
}
 8b4:	cf 91       	pop	r28
 8b6:	df 91       	pop	r29
 8b8:	08 95       	ret

000008ba <EXTI_u8SetSenseCtrl>:


uint8 EXTI_u8SetSenseCtrl(uint8 Copy_u8IntNum, uint8 Copy_u8Sense)
{
 8ba:	df 93       	push	r29
 8bc:	cf 93       	push	r28
 8be:	cd b7       	in	r28, 0x3d	; 61
 8c0:	de b7       	in	r29, 0x3e	; 62
 8c2:	2b 97       	sbiw	r28, 0x0b	; 11
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	f8 94       	cli
 8c8:	de bf       	out	0x3e, r29	; 62
 8ca:	0f be       	out	0x3f, r0	; 63
 8cc:	cd bf       	out	0x3d, r28	; 61
 8ce:	8a 83       	std	Y+2, r24	; 0x02
 8d0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 8d2:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8IntNum)
 8d4:	8a 81       	ldd	r24, Y+2	; 0x02
 8d6:	28 2f       	mov	r18, r24
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	3b 87       	std	Y+11, r19	; 0x0b
 8dc:	2a 87       	std	Y+10, r18	; 0x0a
 8de:	8a 85       	ldd	r24, Y+10	; 0x0a
 8e0:	9b 85       	ldd	r25, Y+11	; 0x0b
 8e2:	81 30       	cpi	r24, 0x01	; 1
 8e4:	91 05       	cpc	r25, r1
 8e6:	09 f4       	brne	.+2      	; 0x8ea <EXTI_u8SetSenseCtrl+0x30>
 8e8:	6a c0       	rjmp	.+212    	; 0x9be <EXTI_u8SetSenseCtrl+0x104>
 8ea:	2a 85       	ldd	r18, Y+10	; 0x0a
 8ec:	3b 85       	ldd	r19, Y+11	; 0x0b
 8ee:	22 30       	cpi	r18, 0x02	; 2
 8f0:	31 05       	cpc	r19, r1
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <EXTI_u8SetSenseCtrl+0x3c>
 8f4:	c3 c0       	rjmp	.+390    	; 0xa7c <EXTI_u8SetSenseCtrl+0x1c2>
 8f6:	8a 85       	ldd	r24, Y+10	; 0x0a
 8f8:	9b 85       	ldd	r25, Y+11	; 0x0b
 8fa:	00 97       	sbiw	r24, 0x00	; 0
 8fc:	09 f0       	breq	.+2      	; 0x900 <EXTI_u8SetSenseCtrl+0x46>
 8fe:	e1 c0       	rjmp	.+450    	; 0xac2 <EXTI_u8SetSenseCtrl+0x208>
	{
	case EXTI_u8INT0:
		switch (Copy_u8Sense)
 900:	8b 81       	ldd	r24, Y+3	; 0x03
 902:	28 2f       	mov	r18, r24
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	39 87       	std	Y+9, r19	; 0x09
 908:	28 87       	std	Y+8, r18	; 0x08
 90a:	88 85       	ldd	r24, Y+8	; 0x08
 90c:	99 85       	ldd	r25, Y+9	; 0x09
 90e:	82 30       	cpi	r24, 0x02	; 2
 910:	91 05       	cpc	r25, r1
 912:	29 f1       	breq	.+74     	; 0x95e <EXTI_u8SetSenseCtrl+0xa4>
 914:	28 85       	ldd	r18, Y+8	; 0x08
 916:	39 85       	ldd	r19, Y+9	; 0x09
 918:	23 30       	cpi	r18, 0x03	; 3
 91a:	31 05       	cpc	r19, r1
 91c:	34 f4       	brge	.+12     	; 0x92a <EXTI_u8SetSenseCtrl+0x70>
 91e:	88 85       	ldd	r24, Y+8	; 0x08
 920:	99 85       	ldd	r25, Y+9	; 0x09
 922:	81 30       	cpi	r24, 0x01	; 1
 924:	91 05       	cpc	r25, r1
 926:	61 f0       	breq	.+24     	; 0x940 <EXTI_u8SetSenseCtrl+0x86>
 928:	47 c0       	rjmp	.+142    	; 0x9b8 <EXTI_u8SetSenseCtrl+0xfe>
 92a:	28 85       	ldd	r18, Y+8	; 0x08
 92c:	39 85       	ldd	r19, Y+9	; 0x09
 92e:	23 30       	cpi	r18, 0x03	; 3
 930:	31 05       	cpc	r19, r1
 932:	21 f1       	breq	.+72     	; 0x97c <EXTI_u8SetSenseCtrl+0xc2>
 934:	88 85       	ldd	r24, Y+8	; 0x08
 936:	99 85       	ldd	r25, Y+9	; 0x09
 938:	84 30       	cpi	r24, 0x04	; 4
 93a:	91 05       	cpc	r25, r1
 93c:	71 f1       	breq	.+92     	; 0x99a <EXTI_u8SetSenseCtrl+0xe0>
 93e:	3c c0       	rjmp	.+120    	; 0x9b8 <EXTI_u8SetSenseCtrl+0xfe>
		{
		case EXTI_u8LOW_LEVEL : CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
 940:	a5 e5       	ldi	r26, 0x55	; 85
 942:	b0 e0       	ldi	r27, 0x00	; 0
 944:	e5 e5       	ldi	r30, 0x55	; 85
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	80 81       	ld	r24, Z
 94a:	8e 7f       	andi	r24, 0xFE	; 254
 94c:	8c 93       	st	X, r24
 94e:	a5 e5       	ldi	r26, 0x55	; 85
 950:	b0 e0       	ldi	r27, 0x00	; 0
 952:	e5 e5       	ldi	r30, 0x55	; 85
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	80 81       	ld	r24, Z
 958:	8d 7f       	andi	r24, 0xFD	; 253
 95a:	8c 93       	st	X, r24
 95c:	b4 c0       	rjmp	.+360    	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
		case EXTI_u8ON_CHANGE : SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
 95e:	a5 e5       	ldi	r26, 0x55	; 85
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	e5 e5       	ldi	r30, 0x55	; 85
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	81 60       	ori	r24, 0x01	; 1
 96a:	8c 93       	st	X, r24
 96c:	a5 e5       	ldi	r26, 0x55	; 85
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	e5 e5       	ldi	r30, 0x55	; 85
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	8d 7f       	andi	r24, 0xFD	; 253
 978:	8c 93       	st	X, r24
 97a:	a5 c0       	rjmp	.+330    	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
		case EXTI_u8FALLING_EDGE : CLR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
 97c:	a5 e5       	ldi	r26, 0x55	; 85
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	e5 e5       	ldi	r30, 0x55	; 85
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	8e 7f       	andi	r24, 0xFE	; 254
 988:	8c 93       	st	X, r24
 98a:	a5 e5       	ldi	r26, 0x55	; 85
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	e5 e5       	ldi	r30, 0x55	; 85
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	80 81       	ld	r24, Z
 994:	82 60       	ori	r24, 0x02	; 2
 996:	8c 93       	st	X, r24
 998:	96 c0       	rjmp	.+300    	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
		case EXTI_u8RISING_EDGE : SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
 99a:	a5 e5       	ldi	r26, 0x55	; 85
 99c:	b0 e0       	ldi	r27, 0x00	; 0
 99e:	e5 e5       	ldi	r30, 0x55	; 85
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	81 60       	ori	r24, 0x01	; 1
 9a6:	8c 93       	st	X, r24
 9a8:	a5 e5       	ldi	r26, 0x55	; 85
 9aa:	b0 e0       	ldi	r27, 0x00	; 0
 9ac:	e5 e5       	ldi	r30, 0x55	; 85
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	82 60       	ori	r24, 0x02	; 2
 9b4:	8c 93       	st	X, r24
 9b6:	87 c0       	rjmp	.+270    	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
		default : Local_u8ErrorState = NOK; break;
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	89 83       	std	Y+1, r24	; 0x01
 9bc:	84 c0       	rjmp	.+264    	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
		}
		break;

		case EXTI_u8INT1:
			switch (Copy_u8Sense)
 9be:	8b 81       	ldd	r24, Y+3	; 0x03
 9c0:	28 2f       	mov	r18, r24
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	3f 83       	std	Y+7, r19	; 0x07
 9c6:	2e 83       	std	Y+6, r18	; 0x06
 9c8:	8e 81       	ldd	r24, Y+6	; 0x06
 9ca:	9f 81       	ldd	r25, Y+7	; 0x07
 9cc:	82 30       	cpi	r24, 0x02	; 2
 9ce:	91 05       	cpc	r25, r1
 9d0:	29 f1       	breq	.+74     	; 0xa1c <EXTI_u8SetSenseCtrl+0x162>
 9d2:	2e 81       	ldd	r18, Y+6	; 0x06
 9d4:	3f 81       	ldd	r19, Y+7	; 0x07
 9d6:	23 30       	cpi	r18, 0x03	; 3
 9d8:	31 05       	cpc	r19, r1
 9da:	34 f4       	brge	.+12     	; 0x9e8 <EXTI_u8SetSenseCtrl+0x12e>
 9dc:	8e 81       	ldd	r24, Y+6	; 0x06
 9de:	9f 81       	ldd	r25, Y+7	; 0x07
 9e0:	81 30       	cpi	r24, 0x01	; 1
 9e2:	91 05       	cpc	r25, r1
 9e4:	61 f0       	breq	.+24     	; 0x9fe <EXTI_u8SetSenseCtrl+0x144>
 9e6:	47 c0       	rjmp	.+142    	; 0xa76 <EXTI_u8SetSenseCtrl+0x1bc>
 9e8:	2e 81       	ldd	r18, Y+6	; 0x06
 9ea:	3f 81       	ldd	r19, Y+7	; 0x07
 9ec:	23 30       	cpi	r18, 0x03	; 3
 9ee:	31 05       	cpc	r19, r1
 9f0:	21 f1       	breq	.+72     	; 0xa3a <EXTI_u8SetSenseCtrl+0x180>
 9f2:	8e 81       	ldd	r24, Y+6	; 0x06
 9f4:	9f 81       	ldd	r25, Y+7	; 0x07
 9f6:	84 30       	cpi	r24, 0x04	; 4
 9f8:	91 05       	cpc	r25, r1
 9fa:	71 f1       	breq	.+92     	; 0xa58 <EXTI_u8SetSenseCtrl+0x19e>
 9fc:	3c c0       	rjmp	.+120    	; 0xa76 <EXTI_u8SetSenseCtrl+0x1bc>
			{
			case EXTI_u8LOW_LEVEL : CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
 9fe:	a5 e5       	ldi	r26, 0x55	; 85
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	e5 e5       	ldi	r30, 0x55	; 85
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	8b 7f       	andi	r24, 0xFB	; 251
 a0a:	8c 93       	st	X, r24
 a0c:	a5 e5       	ldi	r26, 0x55	; 85
 a0e:	b0 e0       	ldi	r27, 0x00	; 0
 a10:	e5 e5       	ldi	r30, 0x55	; 85
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	80 81       	ld	r24, Z
 a16:	87 7f       	andi	r24, 0xF7	; 247
 a18:	8c 93       	st	X, r24
 a1a:	55 c0       	rjmp	.+170    	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
			case EXTI_u8ON_CHANGE : SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
 a1c:	a5 e5       	ldi	r26, 0x55	; 85
 a1e:	b0 e0       	ldi	r27, 0x00	; 0
 a20:	e5 e5       	ldi	r30, 0x55	; 85
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	84 60       	ori	r24, 0x04	; 4
 a28:	8c 93       	st	X, r24
 a2a:	a5 e5       	ldi	r26, 0x55	; 85
 a2c:	b0 e0       	ldi	r27, 0x00	; 0
 a2e:	e5 e5       	ldi	r30, 0x55	; 85
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	80 81       	ld	r24, Z
 a34:	87 7f       	andi	r24, 0xF7	; 247
 a36:	8c 93       	st	X, r24
 a38:	46 c0       	rjmp	.+140    	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
			case EXTI_u8FALLING_EDGE : CLR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
 a3a:	a5 e5       	ldi	r26, 0x55	; 85
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	e5 e5       	ldi	r30, 0x55	; 85
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	8b 7f       	andi	r24, 0xFB	; 251
 a46:	8c 93       	st	X, r24
 a48:	a5 e5       	ldi	r26, 0x55	; 85
 a4a:	b0 e0       	ldi	r27, 0x00	; 0
 a4c:	e5 e5       	ldi	r30, 0x55	; 85
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	80 81       	ld	r24, Z
 a52:	88 60       	ori	r24, 0x08	; 8
 a54:	8c 93       	st	X, r24
 a56:	37 c0       	rjmp	.+110    	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
			case EXTI_u8RISING_EDGE : SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
 a58:	a5 e5       	ldi	r26, 0x55	; 85
 a5a:	b0 e0       	ldi	r27, 0x00	; 0
 a5c:	e5 e5       	ldi	r30, 0x55	; 85
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 81       	ld	r24, Z
 a62:	84 60       	ori	r24, 0x04	; 4
 a64:	8c 93       	st	X, r24
 a66:	a5 e5       	ldi	r26, 0x55	; 85
 a68:	b0 e0       	ldi	r27, 0x00	; 0
 a6a:	e5 e5       	ldi	r30, 0x55	; 85
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	80 81       	ld	r24, Z
 a70:	88 60       	ori	r24, 0x08	; 8
 a72:	8c 93       	st	X, r24
 a74:	28 c0       	rjmp	.+80     	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
			default : Local_u8ErrorState = NOK; break;
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	89 83       	std	Y+1, r24	; 0x01
 a7a:	25 c0       	rjmp	.+74     	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
			}
			break;

			case EXTI_u8INT2:
				switch (Copy_u8Sense)
 a7c:	8b 81       	ldd	r24, Y+3	; 0x03
 a7e:	28 2f       	mov	r18, r24
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	3d 83       	std	Y+5, r19	; 0x05
 a84:	2c 83       	std	Y+4, r18	; 0x04
 a86:	8c 81       	ldd	r24, Y+4	; 0x04
 a88:	9d 81       	ldd	r25, Y+5	; 0x05
 a8a:	83 30       	cpi	r24, 0x03	; 3
 a8c:	91 05       	cpc	r25, r1
 a8e:	31 f0       	breq	.+12     	; 0xa9c <EXTI_u8SetSenseCtrl+0x1e2>
 a90:	2c 81       	ldd	r18, Y+4	; 0x04
 a92:	3d 81       	ldd	r19, Y+5	; 0x05
 a94:	24 30       	cpi	r18, 0x04	; 4
 a96:	31 05       	cpc	r19, r1
 a98:	49 f0       	breq	.+18     	; 0xaac <EXTI_u8SetSenseCtrl+0x1f2>
 a9a:	10 c0       	rjmp	.+32     	; 0xabc <EXTI_u8SetSenseCtrl+0x202>
				{
				case EXTI_u8FALLING_EDGE : CLR_BIT(MCUCSR,MCUCSR_ISC2); break;
 a9c:	a4 e5       	ldi	r26, 0x54	; 84
 a9e:	b0 e0       	ldi	r27, 0x00	; 0
 aa0:	e4 e5       	ldi	r30, 0x54	; 84
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	80 81       	ld	r24, Z
 aa6:	8f 7b       	andi	r24, 0xBF	; 191
 aa8:	8c 93       	st	X, r24
 aaa:	0d c0       	rjmp	.+26     	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
				case EXTI_u8RISING_EDGE : SET_BIT(MCUCSR,MCUCSR_ISC2);break;
 aac:	a4 e5       	ldi	r26, 0x54	; 84
 aae:	b0 e0       	ldi	r27, 0x00	; 0
 ab0:	e4 e5       	ldi	r30, 0x54	; 84
 ab2:	f0 e0       	ldi	r31, 0x00	; 0
 ab4:	80 81       	ld	r24, Z
 ab6:	80 64       	ori	r24, 0x40	; 64
 ab8:	8c 93       	st	X, r24
 aba:	05 c0       	rjmp	.+10     	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
				default : Local_u8ErrorState = NOK; break;
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	89 83       	std	Y+1, r24	; 0x01
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <EXTI_u8SetSenseCtrl+0x20c>
				}
				break;

				default:Local_u8ErrorState = NOK; break;
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorState;
 ac6:	89 81       	ldd	r24, Y+1	; 0x01
}
 ac8:	2b 96       	adiw	r28, 0x0b	; 11
 aca:	0f b6       	in	r0, 0x3f	; 63
 acc:	f8 94       	cli
 ace:	de bf       	out	0x3e, r29	; 62
 ad0:	0f be       	out	0x3f, r0	; 63
 ad2:	cd bf       	out	0x3d, r28	; 61
 ad4:	cf 91       	pop	r28
 ad6:	df 91       	pop	r29
 ad8:	08 95       	ret

00000ada <EXTI_u8IntEnable>:

uint8 EXTI_u8IntEnable(uint8 Copy_u8IntNum)
{
 ada:	df 93       	push	r29
 adc:	cf 93       	push	r28
 ade:	00 d0       	rcall	.+0      	; 0xae0 <EXTI_u8IntEnable+0x6>
 ae0:	00 d0       	rcall	.+0      	; 0xae2 <EXTI_u8IntEnable+0x8>
 ae2:	cd b7       	in	r28, 0x3d	; 61
 ae4:	de b7       	in	r29, 0x3e	; 62
 ae6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
 ae8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8IntNum)
 aea:	8a 81       	ldd	r24, Y+2	; 0x02
 aec:	28 2f       	mov	r18, r24
 aee:	30 e0       	ldi	r19, 0x00	; 0
 af0:	3c 83       	std	Y+4, r19	; 0x04
 af2:	2b 83       	std	Y+3, r18	; 0x03
 af4:	8b 81       	ldd	r24, Y+3	; 0x03
 af6:	9c 81       	ldd	r25, Y+4	; 0x04
 af8:	81 30       	cpi	r24, 0x01	; 1
 afa:	91 05       	cpc	r25, r1
 afc:	89 f0       	breq	.+34     	; 0xb20 <EXTI_u8IntEnable+0x46>
 afe:	2b 81       	ldd	r18, Y+3	; 0x03
 b00:	3c 81       	ldd	r19, Y+4	; 0x04
 b02:	22 30       	cpi	r18, 0x02	; 2
 b04:	31 05       	cpc	r19, r1
 b06:	a1 f0       	breq	.+40     	; 0xb30 <EXTI_u8IntEnable+0x56>
 b08:	8b 81       	ldd	r24, Y+3	; 0x03
 b0a:	9c 81       	ldd	r25, Y+4	; 0x04
 b0c:	00 97       	sbiw	r24, 0x00	; 0
 b0e:	c1 f4       	brne	.+48     	; 0xb40 <EXTI_u8IntEnable+0x66>
	{
	case EXTI_u8INT0 : SET_BIT(GICR,GICR_INT0); break;
 b10:	ab e5       	ldi	r26, 0x5B	; 91
 b12:	b0 e0       	ldi	r27, 0x00	; 0
 b14:	eb e5       	ldi	r30, 0x5B	; 91
 b16:	f0 e0       	ldi	r31, 0x00	; 0
 b18:	80 81       	ld	r24, Z
 b1a:	80 64       	ori	r24, 0x40	; 64
 b1c:	8c 93       	st	X, r24
 b1e:	12 c0       	rjmp	.+36     	; 0xb44 <EXTI_u8IntEnable+0x6a>
	case EXTI_u8INT1 : SET_BIT(GICR,GICR_INT1); break;
 b20:	ab e5       	ldi	r26, 0x5B	; 91
 b22:	b0 e0       	ldi	r27, 0x00	; 0
 b24:	eb e5       	ldi	r30, 0x5B	; 91
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	80 68       	ori	r24, 0x80	; 128
 b2c:	8c 93       	st	X, r24
 b2e:	0a c0       	rjmp	.+20     	; 0xb44 <EXTI_u8IntEnable+0x6a>
	case EXTI_u8INT2 : SET_BIT(GICR,GICR_INT2); break;
 b30:	ab e5       	ldi	r26, 0x5B	; 91
 b32:	b0 e0       	ldi	r27, 0x00	; 0
 b34:	eb e5       	ldi	r30, 0x5B	; 91
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	80 81       	ld	r24, Z
 b3a:	80 62       	ori	r24, 0x20	; 32
 b3c:	8c 93       	st	X, r24
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <EXTI_u8IntEnable+0x6a>
	default : Local_u8ErrorState = NOK; break;
 b40:	81 e0       	ldi	r24, 0x01	; 1
 b42:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 b44:	89 81       	ldd	r24, Y+1	; 0x01


}
 b46:	0f 90       	pop	r0
 b48:	0f 90       	pop	r0
 b4a:	0f 90       	pop	r0
 b4c:	0f 90       	pop	r0
 b4e:	cf 91       	pop	r28
 b50:	df 91       	pop	r29
 b52:	08 95       	ret

00000b54 <EXTI_u8IntDisable>:

uint8 EXTI_u8IntDisable(uint8 Copy_u8IntNum)
{
 b54:	df 93       	push	r29
 b56:	cf 93       	push	r28
 b58:	00 d0       	rcall	.+0      	; 0xb5a <EXTI_u8IntDisable+0x6>
 b5a:	00 d0       	rcall	.+0      	; 0xb5c <EXTI_u8IntDisable+0x8>
 b5c:	cd b7       	in	r28, 0x3d	; 61
 b5e:	de b7       	in	r29, 0x3e	; 62
 b60:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
 b62:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8IntNum)
 b64:	8a 81       	ldd	r24, Y+2	; 0x02
 b66:	28 2f       	mov	r18, r24
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	3c 83       	std	Y+4, r19	; 0x04
 b6c:	2b 83       	std	Y+3, r18	; 0x03
 b6e:	8b 81       	ldd	r24, Y+3	; 0x03
 b70:	9c 81       	ldd	r25, Y+4	; 0x04
 b72:	81 30       	cpi	r24, 0x01	; 1
 b74:	91 05       	cpc	r25, r1
 b76:	89 f0       	breq	.+34     	; 0xb9a <EXTI_u8IntDisable+0x46>
 b78:	2b 81       	ldd	r18, Y+3	; 0x03
 b7a:	3c 81       	ldd	r19, Y+4	; 0x04
 b7c:	22 30       	cpi	r18, 0x02	; 2
 b7e:	31 05       	cpc	r19, r1
 b80:	a1 f0       	breq	.+40     	; 0xbaa <EXTI_u8IntDisable+0x56>
 b82:	8b 81       	ldd	r24, Y+3	; 0x03
 b84:	9c 81       	ldd	r25, Y+4	; 0x04
 b86:	00 97       	sbiw	r24, 0x00	; 0
 b88:	c1 f4       	brne	.+48     	; 0xbba <EXTI_u8IntDisable+0x66>
	{
	case EXTI_u8INT0 : CLR_BIT(GICR,GICR_INT0); break;
 b8a:	ab e5       	ldi	r26, 0x5B	; 91
 b8c:	b0 e0       	ldi	r27, 0x00	; 0
 b8e:	eb e5       	ldi	r30, 0x5B	; 91
 b90:	f0 e0       	ldi	r31, 0x00	; 0
 b92:	80 81       	ld	r24, Z
 b94:	8f 7b       	andi	r24, 0xBF	; 191
 b96:	8c 93       	st	X, r24
 b98:	12 c0       	rjmp	.+36     	; 0xbbe <EXTI_u8IntDisable+0x6a>
	case EXTI_u8INT1 : CLR_BIT(GICR,GICR_INT1); break;
 b9a:	ab e5       	ldi	r26, 0x5B	; 91
 b9c:	b0 e0       	ldi	r27, 0x00	; 0
 b9e:	eb e5       	ldi	r30, 0x5B	; 91
 ba0:	f0 e0       	ldi	r31, 0x00	; 0
 ba2:	80 81       	ld	r24, Z
 ba4:	8f 77       	andi	r24, 0x7F	; 127
 ba6:	8c 93       	st	X, r24
 ba8:	0a c0       	rjmp	.+20     	; 0xbbe <EXTI_u8IntDisable+0x6a>
	case EXTI_u8INT2 : CLR_BIT(GICR,GICR_INT2); break;
 baa:	ab e5       	ldi	r26, 0x5B	; 91
 bac:	b0 e0       	ldi	r27, 0x00	; 0
 bae:	eb e5       	ldi	r30, 0x5B	; 91
 bb0:	f0 e0       	ldi	r31, 0x00	; 0
 bb2:	80 81       	ld	r24, Z
 bb4:	8f 7d       	andi	r24, 0xDF	; 223
 bb6:	8c 93       	st	X, r24
 bb8:	02 c0       	rjmp	.+4      	; 0xbbe <EXTI_u8IntDisable+0x6a>
	default : Local_u8ErrorState = NOK; break;
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 bbe:	89 81       	ldd	r24, Y+1	; 0x01


}
 bc0:	0f 90       	pop	r0
 bc2:	0f 90       	pop	r0
 bc4:	0f 90       	pop	r0
 bc6:	0f 90       	pop	r0
 bc8:	cf 91       	pop	r28
 bca:	df 91       	pop	r29
 bcc:	08 95       	ret

00000bce <GIE_voidEnableGlobal>:
#include "GIE_interface.h"
#include "GIE_reg.h"


void GIE_voidEnableGlobal(void)
{
 bce:	df 93       	push	r29
 bd0:	cf 93       	push	r28
 bd2:	cd b7       	in	r28, 0x3d	; 61
 bd4:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG,SREG_I);
	__asm __volatile("SEI"); /*inline assembly instruction to set I bit*/
 bd6:	78 94       	sei

}
 bd8:	cf 91       	pop	r28
 bda:	df 91       	pop	r29
 bdc:	08 95       	ret

00000bde <GIE_voidDisableGlobal>:


void GIE_voidDisableGlobal(void)
{
 bde:	df 93       	push	r29
 be0:	cf 93       	push	r28
 be2:	cd b7       	in	r28, 0x3d	; 61
 be4:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG,SREG_I);
	__asm __volatile("CLI");   /*inline assembly instruction to CLR I bit*/
 be6:	f8 94       	cli
}
 be8:	cf 91       	pop	r28
 bea:	df 91       	pop	r29
 bec:	08 95       	ret

00000bee <PORT_voidInit>:
#include "PORT_interface.h"
#include "PORT_cfg.h"
#include "PORT_private.h"

void PORT_voidInit(void)
{
 bee:	df 93       	push	r29
 bf0:	cf 93       	push	r28
 bf2:	cd b7       	in	r28, 0x3d	; 61
 bf4:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
 bf6:	ea e3       	ldi	r30, 0x3A	; 58
 bf8:	f0 e0       	ldi	r31, 0x00	; 0
 bfa:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
 bfc:	e7 e3       	ldi	r30, 0x37	; 55
 bfe:	f0 e0       	ldi	r31, 0x00	; 0
 c00:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
 c02:	e4 e3       	ldi	r30, 0x34	; 52
 c04:	f0 e0       	ldi	r31, 0x00	; 0
 c06:	84 e0       	ldi	r24, 0x04	; 4
 c08:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
 c0a:	e1 e3       	ldi	r30, 0x31	; 49
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	10 82       	st	Z, r1

	PORTA= PORTA_INITIAL_VAL;
 c10:	eb e3       	ldi	r30, 0x3B	; 59
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	10 82       	st	Z, r1
	PORTB= PORTB_INITIAL_VAL;
 c16:	e8 e3       	ldi	r30, 0x38	; 56
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	10 82       	st	Z, r1
	PORTC= PORTC_INITIAL_VAL;
 c1c:	e5 e3       	ldi	r30, 0x35	; 53
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	10 82       	st	Z, r1
	PORTD= PORTD_INITIAL_VAL;
 c22:	e2 e3       	ldi	r30, 0x32	; 50
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	10 82       	st	Z, r1

}
 c28:	cf 91       	pop	r28
 c2a:	df 91       	pop	r29
 c2c:	08 95       	ret

00000c2e <main>:
void __vector_1(void)
{
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_HIGH);
}*/
void main(void)
{
 c2e:	df 93       	push	r29
 c30:	cf 93       	push	r28
 c32:	cd b7       	in	r28, 0x3d	; 61
 c34:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 c36:	0e 94 f7 05 	call	0xbee	; 0xbee <PORT_voidInit>
	EXTI_voidInitInt0();
 c3a:	0e 94 10 04 	call	0x820	; 0x820 <EXTI_voidInitInt0>
	EXTI_voidInitInt1();
 c3e:	0e 94 2c 04 	call	0x858	; 0x858 <EXTI_voidInitInt1>
	GIE_voidEnableGlobal();
 c42:	0e 94 e7 05 	call	0xbce	; 0xbce <GIE_voidEnableGlobal>
 c46:	ff cf       	rjmp	.-2      	; 0xc46 <main+0x18>

00000c48 <__vector_1>:

	}
}
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 c48:	1f 92       	push	r1
 c4a:	0f 92       	push	r0
 c4c:	0f b6       	in	r0, 0x3f	; 63
 c4e:	0f 92       	push	r0
 c50:	11 24       	eor	r1, r1
 c52:	2f 93       	push	r18
 c54:	3f 93       	push	r19
 c56:	4f 93       	push	r20
 c58:	5f 93       	push	r21
 c5a:	6f 93       	push	r22
 c5c:	7f 93       	push	r23
 c5e:	8f 93       	push	r24
 c60:	9f 93       	push	r25
 c62:	af 93       	push	r26
 c64:	bf 93       	push	r27
 c66:	ef 93       	push	r30
 c68:	ff 93       	push	r31
 c6a:	df 93       	push	r29
 c6c:	cf 93       	push	r28
 c6e:	cd b7       	in	r28, 0x3d	; 61
 c70:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_HIGH);
 c72:	82 e0       	ldi	r24, 0x02	; 2
 c74:	62 e0       	ldi	r22, 0x02	; 2
 c76:	41 e0       	ldi	r20, 0x01	; 1
 c78:	0e 94 48 01 	call	0x290	; 0x290 <DIO_u8SetPinValue>
}
 c7c:	cf 91       	pop	r28
 c7e:	df 91       	pop	r29
 c80:	ff 91       	pop	r31
 c82:	ef 91       	pop	r30
 c84:	bf 91       	pop	r27
 c86:	af 91       	pop	r26
 c88:	9f 91       	pop	r25
 c8a:	8f 91       	pop	r24
 c8c:	7f 91       	pop	r23
 c8e:	6f 91       	pop	r22
 c90:	5f 91       	pop	r21
 c92:	4f 91       	pop	r20
 c94:	3f 91       	pop	r19
 c96:	2f 91       	pop	r18
 c98:	0f 90       	pop	r0
 c9a:	0f be       	out	0x3f, r0	; 63
 c9c:	0f 90       	pop	r0
 c9e:	1f 90       	pop	r1
 ca0:	18 95       	reti

00000ca2 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 ca2:	1f 92       	push	r1
 ca4:	0f 92       	push	r0
 ca6:	0f b6       	in	r0, 0x3f	; 63
 ca8:	0f 92       	push	r0
 caa:	11 24       	eor	r1, r1
 cac:	2f 93       	push	r18
 cae:	3f 93       	push	r19
 cb0:	4f 93       	push	r20
 cb2:	5f 93       	push	r21
 cb4:	6f 93       	push	r22
 cb6:	7f 93       	push	r23
 cb8:	8f 93       	push	r24
 cba:	9f 93       	push	r25
 cbc:	af 93       	push	r26
 cbe:	bf 93       	push	r27
 cc0:	ef 93       	push	r30
 cc2:	ff 93       	push	r31
 cc4:	df 93       	push	r29
 cc6:	cf 93       	push	r28
 cc8:	cd b7       	in	r28, 0x3d	; 61
 cca:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_LOW);
 ccc:	82 e0       	ldi	r24, 0x02	; 2
 cce:	62 e0       	ldi	r22, 0x02	; 2
 cd0:	40 e0       	ldi	r20, 0x00	; 0
 cd2:	0e 94 48 01 	call	0x290	; 0x290 <DIO_u8SetPinValue>
}
 cd6:	cf 91       	pop	r28
 cd8:	df 91       	pop	r29
 cda:	ff 91       	pop	r31
 cdc:	ef 91       	pop	r30
 cde:	bf 91       	pop	r27
 ce0:	af 91       	pop	r26
 ce2:	9f 91       	pop	r25
 ce4:	8f 91       	pop	r24
 ce6:	7f 91       	pop	r23
 ce8:	6f 91       	pop	r22
 cea:	5f 91       	pop	r21
 cec:	4f 91       	pop	r20
 cee:	3f 91       	pop	r19
 cf0:	2f 91       	pop	r18
 cf2:	0f 90       	pop	r0
 cf4:	0f be       	out	0x3f, r0	; 63
 cf6:	0f 90       	pop	r0
 cf8:	1f 90       	pop	r1
 cfa:	18 95       	reti

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>
